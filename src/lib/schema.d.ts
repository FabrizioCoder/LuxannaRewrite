/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/riot/account/v1/accounts/by-puuid/{puuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account by puuid
         * @description Get account by puuid
         */
        get: operations["account-v1.getByPuuid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account by riot id
         * @description Get account by riot id
         */
        get: operations["account-v1.getByRiotId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/riot/account/v1/accounts/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account by access token
         * @description Get account by access token
         */
        get: operations["account-v1.getByAccessToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get active shard for a player
         * @description Get active shard for a player
         */
        get: operations["account-v1.getActiveShard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all champion mastery entries sorted by number of champion points descending.
         * @description Get all champion mastery entries sorted by number of champion points descending.
         */
        get: operations["champion-mastery-v4.getAllChampionMasteriesByPUUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/by-champion/{championId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a champion mastery by puuid and champion ID.
         * @description Get a champion mastery by puuid and champion ID.
         */
        get: operations["champion-mastery-v4.getChampionMasteryByPUUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specified number of top champion mastery entries sorted by number of champion points descending.
         * @description Get specified number of top champion mastery entries sorted by number of champion points descending.
         */
        get: operations["champion-mastery-v4.getTopChampionMasteriesByPUUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all champion mastery entries sorted by number of champion points descending,
         * @description Get all champion mastery entries sorted by number of champion points descending,
         */
        get: operations["champion-mastery-v4.getAllChampionMasteries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{championId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a champion mastery by player ID and champion ID.
         * @description Get a champion mastery by player ID and champion ID.
         */
        get: operations["champion-mastery-v4.getChampionMastery"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specified number of top champion mastery entries sorted by number of champion points descending.
         * @description Get specified number of top champion mastery entries sorted by number of champion points descending.
         */
        get: operations["champion-mastery-v4.getTopChampionMasteries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/champion-mastery/v4/scores/by-puuid/{encryptedPUUID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
         * @description Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
         */
        get: operations["champion-mastery-v4.getChampionMasteryScoreByPUUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
         * @description Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
         */
        get: operations["champion-mastery-v4.getChampionMasteryScore"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/platform/v3/champion-rotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)
         * @description Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)
         */
        get: operations["champion-v3.getChampionInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/clash/v1/players/by-summoner/{summonerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get players by summoner ID.
         * @description Get players by summoner ID.
         *     ## Implementation Notes
         *     This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
         */
        get: operations["clash-v1.getPlayersBySummoner"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/clash/v1/teams/{teamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team by ID.
         * @description Get team by ID.
         */
        get: operations["clash-v1.getTeamById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/clash/v1/tournaments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all active or upcoming tournaments.
         * @description Get all active or upcoming tournaments.
         */
        get: operations["clash-v1.getTournaments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/clash/v1/tournaments/by-team/{teamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tournament by team ID.
         * @description Get tournament by team ID.
         */
        get: operations["clash-v1.getTournamentByTeam"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/clash/v1/tournaments/{tournamentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tournament by ID.
         * @description Get tournament by ID.
         */
        get: operations["clash-v1.getTournamentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/league-exp/v4/entries/{queue}/{tier}/{division}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the league entries.
         * @description Get all the league entries.
         */
        get: operations["league-exp-v4.getLeagueEntries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/league/v4/challengerleagues/by-queue/{queue}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the challenger league for given queue.
         * @description Get the challenger league for given queue.
         */
        get: operations["league-v4.getChallengerLeague"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/league/v4/entries/by-summoner/{encryptedSummonerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get league entries in all queues for a given summoner ID.
         * @description Get league entries in all queues for a given summoner ID.
         */
        get: operations["league-v4.getLeagueEntriesForSummoner"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/league/v4/entries/{queue}/{tier}/{division}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the league entries.
         * @description Get all the league entries.
         */
        get: operations["league-v4.getLeagueEntries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/league/v4/grandmasterleagues/by-queue/{queue}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the grandmaster league of a specific queue.
         * @description Get the grandmaster league of a specific queue.
         */
        get: operations["league-v4.getGrandmasterLeague"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/league/v4/leagues/{leagueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get league with given ID, including inactive entries.
         * @description Get league with given ID, including inactive entries.
         */
        get: operations["league-v4.getLeagueById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/league/v4/masterleagues/by-queue/{queue}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the master league for given queue.
         * @description Get the master league for given queue.
         */
        get: operations["league-v4.getMasterLeague"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/challenges/v1/challenges/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of all basic challenge configuration information (includes all translations for names and descriptions)
         * @description List of all basic challenge configuration information (includes all translations for names and descriptions)
         */
        get: operations["lol-challenges-v1.getAllChallengeConfigs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/challenges/v1/challenges/percentiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Map of level to percentile of players who have achieved it - keys: ChallengeId -> Season -> Level -> percentile of players who achieved it
         * @description Map of level to percentile of players who have achieved it - keys: ChallengeId -> Season -> Level -> percentile of players who achieved it
         */
        get: operations["lol-challenges-v1.getAllChallengePercentiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/challenges/v1/challenges/{challengeId}/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get challenge configuration (REST)
         * @description Get challenge configuration (REST)
         */
        get: operations["lol-challenges-v1.getChallengeConfigs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/challenges/v1/challenges/{challengeId}/leaderboards/by-level/{level}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER.
         * @description Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER.
         */
        get: operations["lol-challenges-v1.getChallengeLeaderboards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/challenges/v1/challenges/{challengeId}/percentiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Map of level to percentile of players who have achieved it
         * @description Map of level to percentile of players who have achieved it
         */
        get: operations["lol-challenges-v1.getChallengePercentiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/challenges/v1/player-data/{puuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns player information with list of all progressed challenges (REST)
         * @description Returns player information with list of all progressed challenges (REST)
         */
        get: operations["lol-challenges-v1.getPlayerData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/status/v3/shard-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get League of Legends status for the given shard.
         * @description Get League of Legends status for the given shard.
         *     ## Rate Limit Notes
         *     Requests to this API are not counted against the application Rate Limits.
         */
        get: operations["lol-status-v3.getShardData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/status/v4/platform-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get League of Legends status for the given platform.
         * @description Get League of Legends status for the given platform.
         */
        get: operations["lol-status-v4.getPlatformData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lor/deck/v1/decks/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of the calling user's decks.
         * @description Get a list of the calling user's decks.
         */
        get: operations["lor-deck-v1.getDecks"];
        put?: never;
        /**
         * Create a new deck for the calling user.
         * @description Create a new deck for the calling user.
         */
        post: operations["lor-deck-v1.createDeck"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lor/inventory/v1/cards/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a list of cards owned by the calling user.
         * @description Return a list of cards owned by the calling user.
         */
        get: operations["lor-inventory-v1.getCards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lor/match/v1/matches/by-puuid/{puuid}/ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of match ids by PUUID
         * @description Get a list of match ids by PUUID
         */
        get: operations["lor-match-v1.getMatchIdsByPUUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lor/match/v1/matches/{matchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get match by id
         * @description Get match by id
         */
        get: operations["lor-match-v1.getMatch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lor/ranked/v1/leaderboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the players in Master tier.
         * @description Get the players in Master tier.
         */
        get: operations["lor-ranked-v1.getLeaderboards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lor/status/v1/platform-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Legends of Runeterra status for the given platform.
         * @description Get Legends of Runeterra status for the given platform.
         */
        get: operations["lor-status-v1.getPlatformData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/match/v5/matches/by-puuid/{puuid}/ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of match ids by puuid
         * @description Get a list of match ids by puuid
         */
        get: operations["match-v5.getMatchIdsByPUUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/match/v5/matches/{matchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a match by match id
         * @description Get a match by match id
         */
        get: operations["match-v5.getMatch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/match/v5/matches/{matchId}/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a match timeline by match id
         * @description Get a match timeline by match id
         */
        get: operations["match-v5.getTimeline"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/spectator/v4/active-games/by-summoner/{encryptedSummonerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current game information for the given summoner ID.
         * @description Get current game information for the given summoner ID.
         */
        get: operations["spectator-v4.getCurrentGameInfoBySummoner"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/spectator/v4/featured-games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of featured games.
         * @description Get list of featured games.
         */
        get: operations["spectator-v4.getFeaturedGames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fulfillment/v1/summoners/by-puuid/{rsoPUUID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by its RSO encrypted PUUID.
         * @description Get a summoner by its RSO encrypted PUUID.
         */
        get: operations["summoner-v4.getByRSOPUUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/summoner/v4/summoners/by-account/{encryptedAccountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by account ID.
         * @description Get a summoner by account ID.
         */
        get: operations["summoner-v4.getByAccountId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/summoner/v4/summoners/by-name/{summonerName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by summoner name.
         * @description Get a summoner by summoner name.
         */
        get: operations["summoner-v4.getBySummonerName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by PUUID.
         * @description Get a summoner by PUUID.
         */
        get: operations["summoner-v4.getByPUUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/summoner/v4/summoners/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by access token.
         * @description Get a summoner by access token.
         */
        get: operations["summoner-v4.getByAccessToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/summoner/v4/summoners/{encryptedSummonerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by summoner ID.
         * @description Get a summoner by summoner ID.
         */
        get: operations["summoner-v4.getBySummonerId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/league/v1/challenger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the challenger league.
         * @description Get the challenger league.
         */
        get: operations["tft-league-v1.getChallengerLeague"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/league/v1/entries/by-summoner/{summonerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get league entries for a given summoner ID.
         * @description Get league entries for a given summoner ID.
         */
        get: operations["tft-league-v1.getLeagueEntriesForSummoner"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/league/v1/entries/{tier}/{division}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the league entries.
         * @description Get all the league entries.
         */
        get: operations["tft-league-v1.getLeagueEntries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/league/v1/grandmaster": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the grandmaster league.
         * @description Get the grandmaster league.
         */
        get: operations["tft-league-v1.getGrandmasterLeague"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/league/v1/leagues/{leagueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get league with given ID, including inactive entries.
         * @description Get league with given ID, including inactive entries.
         */
        get: operations["tft-league-v1.getLeagueById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/league/v1/master": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the master league.
         * @description Get the master league.
         */
        get: operations["tft-league-v1.getMasterLeague"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/league/v1/rated-ladders/{queue}/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the top rated ladder for given queue
         * @description Get the top rated ladder for given queue
         */
        get: operations["tft-league-v1.getTopRatedLadder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/match/v1/matches/by-puuid/{puuid}/ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of match ids by PUUID
         * @description Get a list of match ids by PUUID
         */
        get: operations["tft-match-v1.getMatchIdsByPUUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/match/v1/matches/{matchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a match by match id
         * @description Get a match by match id
         */
        get: operations["tft-match-v1.getMatch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/status/v1/platform-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Teamfight Tactics status for the given platform.
         * @description Get Teamfight Tactics status for the given platform.
         */
        get: operations["tft-status-v1.getPlatformData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/summoner/v1/summoners/by-account/{encryptedAccountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by account ID.
         * @description Get a summoner by account ID.
         */
        get: operations["tft-summoner-v1.getByAccountId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/summoner/v1/summoners/by-name/{summonerName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by summoner name.
         * @description Get a summoner by summoner name.
         */
        get: operations["tft-summoner-v1.getBySummonerName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by PUUID.
         * @description Get a summoner by PUUID.
         */
        get: operations["tft-summoner-v1.getByPUUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/summoner/v1/summoners/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by access token.
         * @description Get a summoner by access token.
         */
        get: operations["tft-summoner-v1.getByAccessToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tft/summoner/v1/summoners/{encryptedSummonerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a summoner by summoner ID.
         * @description Get a summoner by summoner ID.
         */
        get: operations["tft-summoner-v1.getBySummonerId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament-stub/v5/codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a tournament code for the given tournament - Stub method
         * @description Create a tournament code for the given tournament - Stub method
         */
        post: operations["tournament-stub-v5.createTournamentCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament-stub/v5/codes/{tournamentCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the tournament code DTO associated with a tournament code string - Stub Method
         * @description Returns the tournament code DTO associated with a tournament code string - Stub Method
         */
        get: operations["tournament-stub-v5.getTournamentCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament-stub/v5/lobby-events/by-code/{tournamentCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a list of lobby events by tournament code - Stub method
         * @description Gets a list of lobby events by tournament code - Stub method
         */
        get: operations["tournament-stub-v5.getLobbyEventsByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament-stub/v5/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a tournament provider and returns its ID - Stub method
         * @description Creates a tournament provider and returns its ID - Stub method
         *     ## Implementation Notes
         *     Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
         */
        post: operations["tournament-stub-v5.registerProviderData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament-stub/v5/tournaments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a tournament and returns its ID - Stub method
         * @description Creates a tournament and returns its ID - Stub method
         */
        post: operations["tournament-stub-v5.registerTournament"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament/v5/codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a tournament code for the given tournament.
         * @description Create a tournament code for the given tournament.
         */
        post: operations["tournament-v5.createTournamentCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament/v5/codes/{tournamentCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the tournament code DTO associated with a tournament code string.
         * @description Returns the tournament code DTO associated with a tournament code string.
         */
        get: operations["tournament-v5.getTournamentCode"];
        /**
         * Update the pick type, map, spectator type, or allowed puuids for a code.
         * @description Update the pick type, map, spectator type, or allowed puuids for a code.
         */
        put: operations["tournament-v5.updateCode"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament/v5/games/by-code/{tournamentCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get games details
         * @description Get games details
         *     ## Implementation Notes
         *     Additional endpoint to get tournament games. From this endpoint, you are able to get participants PUUID (the callback doesn't contain this info).
         *
         *     You can also use it to check if the game was recorded and validate callbacks. If the endpoint returns the game, it means a callback was attempted.
         *
         *     This will only work for tournament codes created after November 10, 2023.
         */
        get: operations["tournament-v5.getGames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament/v5/lobby-events/by-code/{tournamentCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a list of lobby events by tournament code.
         * @description Gets a list of lobby events by tournament code.
         */
        get: operations["tournament-v5.getLobbyEventsByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament/v5/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a tournament provider and returns its ID.
         * @description Creates a tournament provider and returns its ID.
         *     ## Implementation Notes
         *     Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
         */
        post: operations["tournament-v5.registerProviderData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lol/tournament/v5/tournaments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a tournament and returns its ID.
         * @description Creates a tournament and returns its ID.
         */
        post: operations["tournament-v5.registerTournament"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/val/content/v1/contents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get content optionally filtered by locale
         * @description Get content optionally filtered by locale
         */
        get: operations["val-content-v1.getContent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/val/match/v1/matches/{matchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get match by id
         * @description Get match by id
         */
        get: operations["val-match-v1.getMatch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/val/match/v1/matchlists/by-puuid/{puuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get matchlist for games played by puuid
         * @description Get matchlist for games played by puuid
         */
        get: operations["val-match-v1.getMatchlist"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/val/match/v1/recent-matches/by-queue/{queue}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent matches
         * @description Get recent matches
         *     ## Implementation Notes
         *     Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.
         */
        get: operations["val-match-v1.getRecent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/val/ranked/v1/leaderboards/by-act/{actId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get leaderboard for the competitive queue
         * @description Get leaderboard for the competitive queue
         */
        get: operations["val-ranked-v1.getLeaderboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/val/status/v1/platform-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get VALORANT status for the given platform.
         * @description Get VALORANT status for the given platform.
         */
        get: operations["val-status-v1.getPlatformData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            status?: {
                status_code?: number;
                message?: string;
            };
        };
        /** AccountDto */
        "account-v1.AccountDto": {
            puuid: string;
            /** @description This field may be excluded from the response if the account doesn't have a gameName. */
            gameName?: string;
            /** @description This field may be excluded from the response if the account doesn't have a tagLine. */
            tagLine?: string;
        };
        /** ActiveShardDto */
        "account-v1.ActiveShardDto": {
            puuid: string;
            game: string;
            activeShard: string;
        };
        /**
         * ChampionMasteryDto
         * @description This object contains single Champion Mastery information for player and champion combination.
         */
        "champion-mastery-v4.ChampionMasteryDto": {
            /**
             * Format: int64
             * @description Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.
             */
            championPointsUntilNextLevel: number;
            /** @description Is chest granted for this champion or not in current season. */
            chestGranted: boolean;
            /**
             * Format: int64
             * @description Champion ID for this entry.
             */
            championId: number;
            /**
             * Format: int64
             * @description Last time this champion was played by this player - in Unix milliseconds time format.
             */
            lastPlayTime: number;
            /**
             * Format: int32
             * @description Champion level for specified player and champion combination.
             */
            championLevel: number;
            /** @description Summoner ID for this entry. (Encrypted) */
            summonerId: string;
            /**
             * Format: int32
             * @description Total number of champion points for this player and champion combination - they are used to determine championLevel.
             */
            championPoints: number;
            /**
             * Format: int64
             * @description Number of points earned since current level has been achieved.
             */
            championPointsSinceLastLevel: number;
            /**
             * Format: int32
             * @description The token earned for this champion at the current championLevel. When the championLevel is advanced the tokensEarned resets to 0.
             */
            tokensEarned: number;
            puuid?: string;
        };
        /** ChampionInfo */
        "champion-v3.ChampionInfo": {
            /** Format: int32 */
            maxNewPlayerLevel: number;
            freeChampionIdsForNewPlayers: number[];
            freeChampionIds: number[];
        };
        /** PlayerDto */
        "clash-v1.PlayerDto": {
            summonerId: string;
            teamId?: string;
            /**
             * @description (Legal values:  UNSELECTED,  FILL,  TOP,  JUNGLE,  MIDDLE,  BOTTOM,  UTILITY)
             * @enum {string}
             */
            position: "UNSELECTED" | "FILL" | "TOP" | "JUNGLE" | "MIDDLE" | "BOTTOM" | "UTILITY";
            /**
             * @description (Legal values:  CAPTAIN,  MEMBER)
             * @enum {string}
             */
            role: "CAPTAIN" | "MEMBER";
        };
        /** TeamDto */
        "clash-v1.TeamDto": {
            id: string;
            /** Format: int32 */
            tournamentId: number;
            name: string;
            /** Format: int32 */
            iconId: number;
            /** Format: int32 */
            tier: number;
            /** @description Summoner ID of the team captain. */
            captain: string;
            abbreviation: string;
            /** @description Team members. */
            players: components["schemas"]["clash-v1.PlayerDto"][];
        };
        /** TournamentDto */
        "clash-v1.TournamentDto": {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            themeId: number;
            nameKey: string;
            nameKeySecondary: string;
            /** @description Tournament phase. */
            schedule: components["schemas"]["clash-v1.TournamentPhaseDto"][];
        };
        /** TournamentPhaseDto */
        "clash-v1.TournamentPhaseDto": {
            /** Format: int32 */
            id: number;
            /** Format: int64 */
            registrationTime: number;
            /** Format: int64 */
            startTime: number;
            cancelled: boolean;
        };
        /** LeagueEntryDTO */
        "league-exp-v4.LeagueEntryDTO": {
            leagueId: string;
            /** @description Player's summonerId (Encrypted) */
            summonerId: string;
            summonerName: string;
            queueType: string;
            tier: string;
            /** @description The player's division within a tier. */
            rank: string;
            /** Format: int32 */
            leaguePoints: number;
            /**
             * Format: int32
             * @description Winning team on Summoners Rift. First placement in Teamfight Tactics.
             */
            wins: number;
            /**
             * Format: int32
             * @description Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
             */
            losses: number;
            hotStreak: boolean;
            veteran: boolean;
            freshBlood: boolean;
            inactive: boolean;
            miniSeries?: components["schemas"]["league-exp-v4.MiniSeriesDTO"];
        };
        /** MiniSeriesDTO */
        "league-exp-v4.MiniSeriesDTO": {
            /** Format: int32 */
            losses: number;
            progress: string;
            /** Format: int32 */
            target: number;
            /** Format: int32 */
            wins: number;
        };
        /** LeagueListDTO */
        "league-v4.LeagueListDTO": {
            leagueId?: string;
            entries: components["schemas"]["league-v4.LeagueItemDTO"][];
            tier: string;
            name?: string;
            queue?: string;
        };
        /** LeagueItemDTO */
        "league-v4.LeagueItemDTO": {
            freshBlood: boolean;
            /**
             * Format: int32
             * @description Winning team on Summoners Rift.
             */
            wins: number;
            summonerName: string;
            miniSeries?: components["schemas"]["league-v4.MiniSeriesDTO"];
            inactive: boolean;
            veteran: boolean;
            hotStreak: boolean;
            rank: string;
            /** Format: int32 */
            leaguePoints: number;
            /**
             * Format: int32
             * @description Losing team on Summoners Rift.
             */
            losses: number;
            /** @description Player's encrypted summonerId. */
            summonerId: string;
        };
        /** MiniSeriesDTO */
        "league-v4.MiniSeriesDTO": {
            /** Format: int32 */
            losses: number;
            progress: string;
            /** Format: int32 */
            target: number;
            /** Format: int32 */
            wins: number;
        };
        /** LeagueEntryDTO */
        "league-v4.LeagueEntryDTO": {
            leagueId?: string;
            /** @description Player's encrypted summonerId. */
            summonerId: string;
            summonerName: string;
            queueType: string;
            tier?: string;
            /** @description The player's division within a tier. */
            rank?: string;
            /** Format: int32 */
            leaguePoints: number;
            /**
             * Format: int32
             * @description Winning team on Summoners Rift.
             */
            wins: number;
            /**
             * Format: int32
             * @description Losing team on Summoners Rift.
             */
            losses: number;
            hotStreak: boolean;
            veteran: boolean;
            freshBlood: boolean;
            inactive: boolean;
            miniSeries?: components["schemas"]["league-v4.MiniSeriesDTO"];
        };
        /** ChallengeConfigInfoDto */
        "lol-challenges-v1.ChallengeConfigInfoDto": {
            /** Format: int64 */
            id: number;
            localizedNames: {
                [key: string]: {
                    [key: string]: string | undefined;
                } | undefined;
            };
            /**
             * @description DISABLED - not visible and not calculated, HIDDEN - not visible, but calculated, ENABLED - visible and calculated, ARCHIVED - visible, but not calculated
             * @enum {string}
             */
            state: "DISABLED" | "HIDDEN" | "ENABLED" | "ARCHIVED";
            /**
             * @description LIFETIME - stats are incremented without reset, SEASON - stats are accumulated by season and reset at the beginning of new season
             * @enum {string}
             */
            tracking?: "LIFETIME" | "SEASON";
            /** Format: int64 */
            startTimestamp?: number;
            /** Format: int64 */
            endTimestamp?: number;
            leaderboard: boolean;
            thresholds: {
                [key: string]: number | undefined;
            };
        };
        /**
         * State
         * @description DISABLED - not visible and not calculated,
         *     HIDDEN - not visible, but calculated,
         *     ENABLED - visible and calculated,
         *     ARCHIVED - visible, but not calculated
         */
        "lol-challenges-v1.State": Record<string, never>;
        /**
         * Tracking
         * @description LIFETIME - stats are incremented without reset,
         *     SEASON - stats are accumulated by season and reset at the beginning of new season
         */
        "lol-challenges-v1.Tracking": Record<string, never>;
        /** ApexPlayerInfoDto */
        "lol-challenges-v1.ApexPlayerInfoDto": {
            puuid: string;
            /** Format: double */
            value: number;
            /** Format: int32 */
            position: number;
        };
        /**
         * Level
         * @description 0 NONE,
         *     1 IRON,
         *     2 BRONZE,
         *     3 SILVER,
         *     4 GOLD,
         *     5 PLATINUM,
         *     6 DIAMOND,
         *     7 MASTER,
         *     8 GRANDMASTER,
         *     9 CHALLENGER
         */
        "lol-challenges-v1.Level": Record<string, never>;
        /** PlayerInfoDto */
        "lol-challenges-v1.PlayerInfoDto": {
            challenges: components["schemas"]["lol-challenges-v1.ChallengeInfo"][];
            preferences: components["schemas"]["lol-challenges-v1.PlayerClientPreferences"];
            totalPoints: components["schemas"]["lol-challenges-v1.ChallengePoints"];
            categoryPoints: {
                [key: string]: components["schemas"]["lol-challenges-v1.ChallengePoints"] | undefined;
            };
        };
        /** ChallengeInfo */
        "lol-challenges-v1.ChallengeInfo": {
            /** Format: int64 */
            challengeId: number;
            /** Format: double */
            percentile: number;
            level: string;
            /** Format: double */
            value: number;
            /** Format: int64 */
            achievedTime?: number;
            /** Format: int64 */
            position?: number;
            /** Format: int64 */
            playersInLevel?: number;
        };
        /** PlayerClientPreferences */
        "lol-challenges-v1.PlayerClientPreferences": {
            bannerAccent?: string;
            title?: string;
            challengeIds?: number[];
            crestBorder?: string;
            /** Format: int32 */
            prestigeCrestBorderLevel?: number;
        };
        /** ChallengePoints */
        "lol-challenges-v1.ChallengePoints": {
            level: string;
            /** Format: int64 */
            current: number;
            /** Format: int64 */
            max: number;
            /** Format: double */
            percentile?: number;
        };
        /** ShardStatus */
        "lol-status-v3.ShardStatus": {
            locales: string[];
            hostname: string;
            name: string;
            services: components["schemas"]["lol-status-v3.Service"][];
            slug: string;
            region_tag: string;
        };
        /** Service */
        "lol-status-v3.Service": {
            name: string;
            slug: string;
            status: string;
            incidents: components["schemas"]["lol-status-v3.Incident"][];
        };
        /** Incident */
        "lol-status-v3.Incident": {
            /** Format: int64 */
            id: number;
            active: boolean;
            created_at: string;
            updates: components["schemas"]["lol-status-v3.Message"][];
        };
        /** Message */
        "lol-status-v3.Message": {
            id: string;
            author: string;
            heading: string;
            content: string;
            severity: string;
            created_at: string;
            updated_at: string;
            translations: components["schemas"]["lol-status-v3.Translation"][];
        };
        /** Translation */
        "lol-status-v3.Translation": {
            updated_at: string;
            locale: string;
            content: string;
        };
        /** PlatformDataDto */
        "lol-status-v4.PlatformDataDto": {
            id: string;
            name: string;
            locales: string[];
            maintenances: components["schemas"]["lol-status-v4.StatusDto"][];
            incidents: components["schemas"]["lol-status-v4.StatusDto"][];
        };
        /** StatusDto */
        "lol-status-v4.StatusDto": {
            /** Format: int32 */
            id: number;
            /**
             * @description (Legal values:  scheduled,  in_progress,  complete)
             * @enum {string}
             */
            maintenance_status?: "scheduled" | "in_progress" | "complete";
            /**
             * @description (Legal values:  info,  warning,  critical)
             * @enum {string}
             */
            incident_severity?: "info" | "warning" | "critical";
            titles: components["schemas"]["lol-status-v4.ContentDto"][];
            updates: components["schemas"]["lol-status-v4.UpdateDto"][];
            created_at: string;
            archive_at?: string;
            updated_at?: string;
            /** @description (Legal values: windows, macos, android, ios, ps4, xbone, switch) */
            platforms: ("windows" | "macos" | "android" | "ios" | "ps4" | "xbone" | "switch")[];
        };
        /** ContentDto */
        "lol-status-v4.ContentDto": {
            locale: string;
            content: string;
        };
        /** UpdateDto */
        "lol-status-v4.UpdateDto": {
            /** Format: int32 */
            id: number;
            author: string;
            publish: boolean;
            /** @description (Legal values: riotclient, riotstatus, game) */
            publish_locations: ("riotclient" | "riotstatus" | "game")[];
            translations: components["schemas"]["lol-status-v4.ContentDto"][];
            created_at: string;
            updated_at: string;
        };
        /** DeckDto */
        "lor-deck-v1.DeckDto": {
            id: string;
            name: string;
            code: string;
        };
        /** NewDeckDto */
        "lor-deck-v1.NewDeckDto": {
            name: string;
            code: string;
        };
        /** CardDto */
        "lor-inventory-v1.CardDto": {
            code: string;
            count: string;
        };
        /** MatchDto */
        "lor-match-v1.MatchDto": {
            /** @description Match metadata. */
            metadata: components["schemas"]["lor-match-v1.MetadataDto"];
            /** @description Match info. */
            info: components["schemas"]["lor-match-v1.InfoDto"];
        };
        /** MetadataDto */
        "lor-match-v1.MetadataDto": {
            /** @description Match data version. */
            data_version: string;
            /** @description Match id. */
            match_id: string;
            /** @description A list of participant PUUIDs. */
            participants: string[];
        };
        /** InfoDto */
        "lor-match-v1.InfoDto": {
            /**
             * @description (Legal values:  Constructed,  Expeditions,  Tutorial)
             * @enum {string}
             */
            game_mode: "Constructed" | "Expeditions" | "Tutorial";
            /**
             * @description (Legal values:  Ranked,  Normal,  AI,  Tutorial,  VanillaTrial,  Singleton,  StandardGauntlet)
             * @enum {string}
             */
            game_type: "Ranked" | "Normal" | "AI" | "Tutorial" | "VanillaTrial" | "Singleton" | "StandardGauntlet";
            game_start_time_utc: string;
            game_version: string;
            players: components["schemas"]["lor-match-v1.PlayerDto"][];
            /**
             * Format: int32
             * @description Total turns taken by both players.
             */
            total_turn_count: number;
        };
        /** PlayerDto */
        "lor-match-v1.PlayerDto": {
            puuid: string;
            deck_id: string;
            /** @description Code for the deck played. Refer to LOR documentation for details on deck codes. */
            deck_code: string;
            factions: string[];
            game_outcome: string;
            /**
             * Format: int32
             * @description The order in which the players took turns.
             */
            order_of_play: number;
        };
        /** LeaderboardDto */
        "lor-ranked-v1.LeaderboardDto": {
            /** @description A list of players in Master tier. */
            players: components["schemas"]["lor-ranked-v1.PlayerDto"][];
        };
        /** PlayerDto */
        "lor-ranked-v1.PlayerDto": {
            name: string;
            /** Format: int32 */
            rank: number;
            /**
             * Format: int32
             * @description League points.
             */
            lp: number;
        };
        /** PlatformDataDto */
        "lor-status-v1.PlatformDataDto": {
            id: string;
            name: string;
            locales: string[];
            maintenances: components["schemas"]["lor-status-v1.StatusDto"][];
            incidents: components["schemas"]["lor-status-v1.StatusDto"][];
        };
        /** StatusDto */
        "lor-status-v1.StatusDto": {
            /** Format: int32 */
            id: number;
            /**
             * @description (Legal values:  scheduled,  in_progress,  complete)
             * @enum {string}
             */
            maintenance_status: "scheduled" | "in_progress" | "complete";
            /**
             * @description (Legal values:  info,  warning,  critical)
             * @enum {string}
             */
            incident_severity: "info" | "warning" | "critical";
            titles: components["schemas"]["lor-status-v1.ContentDto"][];
            updates: components["schemas"]["lor-status-v1.UpdateDto"][];
            created_at: string;
            archive_at: string;
            updated_at: string;
            /** @description (Legal values: windows, macos, android, ios, ps4, xbone, switch) */
            platforms: ("windows" | "macos" | "android" | "ios" | "ps4" | "xbone" | "switch")[];
        };
        /** ContentDto */
        "lor-status-v1.ContentDto": {
            locale: string;
            content: string;
        };
        /** UpdateDto */
        "lor-status-v1.UpdateDto": {
            /** Format: int32 */
            id: number;
            author: string;
            publish: boolean;
            /** @description (Legal values: riotclient, riotstatus, game) */
            publish_locations: ("riotclient" | "riotstatus" | "game")[];
            translations: components["schemas"]["lor-status-v1.ContentDto"][];
            created_at: string;
            updated_at: string;
        };
        /** MatchDto */
        "match-v5.MatchDto": {
            /** @description Match metadata. */
            metadata: components["schemas"]["match-v5.MetadataDto"];
            /** @description Match info. */
            info: components["schemas"]["match-v5.InfoDto"];
        };
        /** MetadataDto */
        "match-v5.MetadataDto": {
            /** @description Match data version. */
            dataVersion: string;
            /** @description Match id. */
            matchId: string;
            /** @description A list of participant PUUIDs. */
            participants: string[];
        };
        /** InfoDto */
        "match-v5.InfoDto": {
            /**
             * Format: int64
             * @description Unix timestamp for when the game is created on the game server (i.e., the loading screen).
             */
            gameCreation: number;
            /**
             * Format: int64
             * @description Prior to patch 11.20, this field returns the game length in milliseconds calculated from gameEndTimestamp - gameStartTimestamp. Post patch 11.20, this field returns the max timePlayed of any participant in the game in seconds, which makes the behavior of this field consistent with that of match-v4. The best way to handling the change in this field is to treat the value as milliseconds if the gameEndTimestamp field isn't in the response and to treat the value as seconds if gameEndTimestamp is in the response.
             */
            gameDuration: number;
            /**
             * Format: int64
             * @description Unix timestamp for when match ends on the game server. This timestamp can occasionally be significantly longer than when the match "ends". The most reliable way of determining the timestamp for the end of the match would be to add the max time played of any participant to the gameStartTimestamp. This field was added to match-v5 in patch 11.20 on Oct 5th, 2021.
             */
            gameEndTimestamp?: number;
            /** Format: int64 */
            gameId: number;
            /** @description Refer to the Game Constants documentation. */
            gameMode: string;
            gameName: string;
            /**
             * Format: int64
             * @description Unix timestamp for when match starts on the game server.
             */
            gameStartTimestamp: number;
            gameType: string;
            /** @description The first two parts can be used to determine the patch a game was played on. */
            gameVersion: string;
            /**
             * Format: int32
             * @description Refer to the Game Constants documentation.
             */
            mapId: number;
            participants: components["schemas"]["match-v5.ParticipantDto"][];
            /** @description Platform where the match was played. */
            platformId: string;
            /**
             * Format: int32
             * @description Refer to the Game Constants documentation.
             */
            queueId: number;
            teams: components["schemas"]["match-v5.TeamDto"][];
            /** @description Tournament code used to generate the match. This field was added to match-v5 in patch 11.13 on June 23rd, 2021. */
            tournamentCode?: string;
        };
        /** ParticipantDto */
        "match-v5.ParticipantDto": {
            /** Format: int32 */
            assists: number;
            /** Format: int32 */
            baronKills: number;
            /** Format: int32 */
            bountyLevel: number;
            /** Format: int32 */
            champExperience: number;
            /** Format: int32 */
            champLevel: number;
            /**
             * Format: int32
             * @description Prior to patch 11.4, on Feb 18th, 2021, this field returned invalid championIds. We recommend determining the champion based on the championName field for matches played prior to patch 11.4.
             */
            championId: number;
            championName: string;
            /**
             * Format: int32
             * @description This field is currently only utilized for Kayn's transformations. (Legal values: 0 - None, 1 - Slayer, 2 - Assassin)
             */
            championTransform: number;
            /** Format: int32 */
            consumablesPurchased: number;
            /** Format: int32 */
            damageDealtToBuildings?: number;
            /** Format: int32 */
            damageDealtToObjectives: number;
            /** Format: int32 */
            damageDealtToTurrets: number;
            /** Format: int32 */
            damageSelfMitigated: number;
            /** Format: int32 */
            deaths: number;
            /** Format: int32 */
            detectorWardsPlaced: number;
            /** Format: int32 */
            doubleKills: number;
            /** Format: int32 */
            dragonKills: number;
            firstBloodAssist: boolean;
            firstBloodKill: boolean;
            firstTowerAssist: boolean;
            firstTowerKill: boolean;
            gameEndedInEarlySurrender: boolean;
            gameEndedInSurrender: boolean;
            /** Format: int32 */
            goldEarned: number;
            /** Format: int32 */
            goldSpent: number;
            /** @description Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field. */
            individualPosition: string;
            /** Format: int32 */
            inhibitorKills: number;
            /** Format: int32 */
            inhibitorTakedowns?: number;
            /** Format: int32 */
            inhibitorsLost?: number;
            /** Format: int32 */
            item0: number;
            /** Format: int32 */
            item1: number;
            /** Format: int32 */
            item2: number;
            /** Format: int32 */
            item3: number;
            /** Format: int32 */
            item4: number;
            /** Format: int32 */
            item5: number;
            /** Format: int32 */
            item6: number;
            /** Format: int32 */
            itemsPurchased: number;
            /** Format: int32 */
            killingSprees: number;
            /** Format: int32 */
            kills: number;
            lane: string;
            /** Format: int32 */
            largestCriticalStrike: number;
            /** Format: int32 */
            largestKillingSpree: number;
            /** Format: int32 */
            largestMultiKill: number;
            /** Format: int32 */
            longestTimeSpentLiving: number;
            /** Format: int32 */
            magicDamageDealt: number;
            /** Format: int32 */
            magicDamageDealtToChampions: number;
            /** Format: int32 */
            magicDamageTaken: number;
            /** Format: int32 */
            neutralMinionsKilled: number;
            /** Format: int32 */
            nexusKills: number;
            /** Format: int32 */
            nexusTakedowns?: number;
            /** Format: int32 */
            nexusLost?: number;
            /** Format: int32 */
            objectivesStolen: number;
            /** Format: int32 */
            objectivesStolenAssists: number;
            /** Format: int32 */
            participantId: number;
            /** Format: int32 */
            pentaKills: number;
            perks: components["schemas"]["match-v5.PerksDto"];
            /** Format: int32 */
            physicalDamageDealt: number;
            /** Format: int32 */
            physicalDamageDealtToChampions: number;
            /** Format: int32 */
            physicalDamageTaken: number;
            /** Format: int32 */
            profileIcon: number;
            puuid: string;
            /** Format: int32 */
            quadraKills: number;
            riotIdName?: string;
            riotIdGameName?: string;
            riotIdTagline: string;
            role: string;
            /** Format: int32 */
            sightWardsBoughtInGame: number;
            /** Format: int32 */
            spell1Casts: number;
            /** Format: int32 */
            spell2Casts: number;
            /** Format: int32 */
            spell3Casts: number;
            /** Format: int32 */
            spell4Casts: number;
            /** Format: int32 */
            summoner1Casts: number;
            /** Format: int32 */
            summoner1Id: number;
            /** Format: int32 */
            summoner2Casts: number;
            /** Format: int32 */
            summoner2Id: number;
            summonerId: string;
            /** Format: int32 */
            summonerLevel: number;
            summonerName: string;
            teamEarlySurrendered: boolean;
            /** Format: int32 */
            teamId: number;
            /** @description Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field. */
            teamPosition: string;
            /** Format: int32 */
            timeCCingOthers: number;
            /** Format: int32 */
            timePlayed: number;
            /** Format: int32 */
            totalDamageDealt: number;
            /** Format: int32 */
            totalDamageDealtToChampions: number;
            /** Format: int32 */
            totalDamageShieldedOnTeammates: number;
            /** Format: int32 */
            totalDamageTaken: number;
            /** Format: int32 */
            totalHeal: number;
            /** Format: int32 */
            totalHealsOnTeammates: number;
            /** Format: int32 */
            totalMinionsKilled: number;
            /** Format: int32 */
            totalTimeCCDealt: number;
            /** Format: int32 */
            totalTimeSpentDead: number;
            /** Format: int32 */
            totalUnitsHealed: number;
            /** Format: int32 */
            tripleKills: number;
            /** Format: int32 */
            trueDamageDealt: number;
            /** Format: int32 */
            trueDamageDealtToChampions: number;
            /** Format: int32 */
            trueDamageTaken: number;
            /** Format: int32 */
            turretKills: number;
            /** Format: int32 */
            turretTakedowns?: number;
            /** Format: int32 */
            turretsLost?: number;
            /** Format: int32 */
            unrealKills: number;
            /** Format: int32 */
            visionScore: number;
            /** Format: int32 */
            visionWardsBoughtInGame: number;
            /** Format: int32 */
            wardsKilled: number;
            /** Format: int32 */
            wardsPlaced: number;
            win: boolean;
            /** Format: int32 */
            allInPings?: number;
            /** Format: int32 */
            assistMePings?: number;
            /** Format: int32 */
            baitPings?: number;
            /** Format: int32 */
            basicPings?: number;
            /** Format: int32 */
            commandPings?: number;
            /** Format: int32 */
            dangerPings?: number;
            /** Format: int32 */
            enemyMissingPings?: number;
            /** Format: int32 */
            enemyVisionPings?: number;
            /** Format: int32 */
            getBackPings?: number;
            /** Format: int32 */
            holdPings?: number;
            /** Format: int32 */
            needVisionPings?: number;
            /** Format: int32 */
            onMyWayPings?: number;
            /** Format: int32 */
            pushPings?: number;
            /** Format: int32 */
            visionClearedPings?: number;
            eligibleForProgression?: boolean;
            challenges?: components["schemas"]["match-v5.ParticipantChallenges"];
            /** Format: int32 */
            totalAllyJungleMinionsKilled?: number;
            /** Format: int32 */
            totalEnemyJungleMinionsKilled?: number;
            /** Format: int32 */
            playerAugment1?: number;
            /** Format: int32 */
            playerAugment2?: number;
            /** Format: int32 */
            playerAugment3?: number;
            /** Format: int32 */
            playerAugment4?: number;
            /** Format: int32 */
            playerSubteamId?: number;
            /** Format: int32 */
            subteamPlacement?: number;
            /** Format: int32 */
            placement?: number;
            missions?: components["schemas"]["match-v5.ParticipantMissions"];
            /** Format: int32 */
            playerScore0?: number;
            /** Format: int32 */
            playerScore1?: number;
            /** Format: int32 */
            playerScore10?: number;
            /** Format: int32 */
            playerScore11?: number;
            /** Format: int32 */
            playerScore2?: number;
            /** Format: int32 */
            playerScore3?: number;
            /** Format: int32 */
            playerScore4?: number;
            /** Format: int32 */
            playerScore5?: number;
            /** Format: int32 */
            playerScore6?: number;
            /** Format: int32 */
            playerScore7?: number;
            /** Format: int32 */
            playerScore8?: number;
            /** Format: int32 */
            playerScore9?: number;
        };
        /** PerksDto */
        "match-v5.PerksDto": {
            statPerks: components["schemas"]["match-v5.PerkStatsDto"];
            styles: components["schemas"]["match-v5.PerkStyleDto"][];
        };
        /** PerkStatsDto */
        "match-v5.PerkStatsDto": {
            /** Format: int32 */
            defense: number;
            /** Format: int32 */
            flex: number;
            /** Format: int32 */
            offense: number;
        };
        /** PerkStyleDto */
        "match-v5.PerkStyleDto": {
            description: string;
            selections: components["schemas"]["match-v5.PerkStyleSelectionDto"][];
            /** Format: int32 */
            style: number;
        };
        /** PerkStyleSelectionDto */
        "match-v5.PerkStyleSelectionDto": {
            /** Format: int32 */
            perk: number;
            /** Format: int32 */
            var1: number;
            /** Format: int32 */
            var2: number;
            /** Format: int32 */
            var3: number;
        };
        /** TeamDto */
        "match-v5.TeamDto": {
            bans: components["schemas"]["match-v5.BanDto"][];
            objectives: components["schemas"]["match-v5.ObjectivesDto"];
            /** Format: int32 */
            teamId: number;
            win: boolean;
        };
        /** BanDto */
        "match-v5.BanDto": {
            /** Format: int32 */
            championId: number;
            /** Format: int32 */
            pickTurn: number;
        };
        /** ObjectivesDto */
        "match-v5.ObjectivesDto": {
            baron: components["schemas"]["match-v5.ObjectiveDto"];
            champion: components["schemas"]["match-v5.ObjectiveDto"];
            dragon: components["schemas"]["match-v5.ObjectiveDto"];
            inhibitor: components["schemas"]["match-v5.ObjectiveDto"];
            riftHerald: components["schemas"]["match-v5.ObjectiveDto"];
            tower: components["schemas"]["match-v5.ObjectiveDto"];
            horde?: components["schemas"]["match-v5.ObjectiveDto"];
        };
        /** ObjectiveDto */
        "match-v5.ObjectiveDto": {
            first: boolean;
            /** Format: int32 */
            kills: number;
        };
        /** MatchTimelineDto */
        "match-v5.MatchTimelineDto": {
            metadata: components["schemas"]["match-v5.MetadataDto"];
            info: components["schemas"]["match-v5.MatchTimelineInfo"];
        };
        /** CurrentGameInfo */
        "spectator-v4.CurrentGameInfo": {
            /**
             * Format: int64
             * @description The ID of the game
             */
            gameId: number;
            /** @description The game type */
            gameType: string;
            /**
             * Format: int64
             * @description The game start time represented in epoch milliseconds
             */
            gameStartTime: number;
            /**
             * Format: int64
             * @description The ID of the map
             */
            mapId: number;
            /**
             * Format: int64
             * @description The amount of time in seconds that has passed since the game started
             */
            gameLength: number;
            /** @description The ID of the platform on which the game is being played */
            platformId: string;
            /** @description The game mode */
            gameMode: string;
            /** @description Banned champion information */
            bannedChampions: components["schemas"]["spectator-v4.BannedChampion"][];
            /**
             * Format: int64
             * @description The queue type (queue types are documented on the Game Constants page)
             */
            gameQueueConfigId?: number;
            /** @description The observer information */
            observers: components["schemas"]["spectator-v4.Observer"];
            /** @description The participant information */
            participants: components["schemas"]["spectator-v4.CurrentGameParticipant"][];
        };
        /** BannedChampion */
        "spectator-v4.BannedChampion": {
            /**
             * Format: int32
             * @description The turn during which the champion was banned
             */
            pickTurn: number;
            /**
             * Format: int64
             * @description The ID of the banned champion
             */
            championId: number;
            /**
             * Format: int64
             * @description The ID of the team that banned the champion
             */
            teamId: number;
        };
        /** Observer */
        "spectator-v4.Observer": {
            /** @description Key used to decrypt the spectator grid game data for playback */
            encryptionKey: string;
        };
        /** CurrentGameParticipant */
        "spectator-v4.CurrentGameParticipant": {
            /**
             * Format: int64
             * @description The ID of the champion played by this participant
             */
            championId: number;
            /** @description Perks/Runes Reforged Information */
            perks?: components["schemas"]["spectator-v4.Perks"];
            /**
             * Format: int64
             * @description The ID of the profile icon used by this participant
             */
            profileIconId: number;
            /** @description Flag indicating whether or not this participant is a bot */
            bot: boolean;
            /**
             * Format: int64
             * @description The team ID of this participant, indicating the participant's team
             */
            teamId: number;
            /** @description The summoner name of this participant */
            summonerName: string;
            /** @description The encrypted summoner ID of this participant */
            summonerId: string;
            /**
             * Format: int64
             * @description The ID of the first summoner spell used by this participant
             */
            spell1Id: number;
            /**
             * Format: int64
             * @description The ID of the second summoner spell used by this participant
             */
            spell2Id: number;
            /** @description List of Game Customizations */
            gameCustomizationObjects: components["schemas"]["spectator-v4.GameCustomizationObject"][];
        };
        /** Perks */
        "spectator-v4.Perks": {
            /** @description IDs of the perks/runes assigned. */
            perkIds: number[];
            /**
             * Format: int64
             * @description Primary runes path
             */
            perkStyle: number;
            /**
             * Format: int64
             * @description Secondary runes path
             */
            perkSubStyle: number;
        };
        /** GameCustomizationObject */
        "spectator-v4.GameCustomizationObject": {
            /** @description Category identifier for Game Customization */
            category: string;
            /** @description Game Customization content */
            content: string;
        };
        /** FeaturedGames */
        "spectator-v4.FeaturedGames": {
            /** @description The list of featured games */
            gameList: components["schemas"]["spectator-v4.FeaturedGameInfo"][];
            /**
             * Format: int64
             * @description The suggested interval to wait before requesting FeaturedGames again
             */
            clientRefreshInterval: number;
        };
        /** FeaturedGameInfo */
        "spectator-v4.FeaturedGameInfo": {
            /**
             * @description The game mode
             *                  (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)
             * @enum {string}
             */
            gameMode: "CLASSIC" | "ODIN" | "ARAM" | "TUTORIAL" | "ONEFORALL" | "ASCENSION" | "FIRSTBLOOD" | "KINGPORO";
            /**
             * Format: int64
             * @description The amount of time in seconds that has passed since the game started
             */
            gameLength: number;
            /**
             * Format: int64
             * @description The ID of the map
             */
            mapId: number;
            /**
             * @description The game type
             *                  (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)
             * @enum {string}
             */
            gameType: "CUSTOM_GAME" | "MATCHED_GAME" | "TUTORIAL_GAME";
            /** @description Banned champion information */
            bannedChampions: components["schemas"]["spectator-v4.BannedChampion"][];
            /**
             * Format: int64
             * @description The ID of the game
             */
            gameId: number;
            /** @description The observer information */
            observers: components["schemas"]["spectator-v4.Observer"];
            /**
             * Format: int64
             * @description The queue type (queue types are documented on the Game Constants page)
             */
            gameQueueConfigId: number;
            /**
             * Format: int64
             * @description The game start time represented in epoch milliseconds
             */
            gameStartTime: number;
            /** @description The participant information */
            participants: components["schemas"]["spectator-v4.Participant"][];
            /** @description The ID of the platform on which the game is being played */
            platformId: string;
        };
        /** Participant */
        "spectator-v4.Participant": {
            /** @description Flag indicating whether or not this participant is a bot */
            bot: boolean;
            /**
             * Format: int64
             * @description The ID of the second summoner spell used by this participant
             */
            spell2Id: number;
            /**
             * Format: int64
             * @description The ID of the profile icon used by this participant
             */
            profileIconId: number;
            /** @description The summoner name of this participant */
            summonerName: string;
            /**
             * Format: int64
             * @description The ID of the champion played by this participant
             */
            championId: number;
            /**
             * Format: int64
             * @description The team ID of this participant, indicating the participant's team
             */
            teamId: number;
            /**
             * Format: int64
             * @description The ID of the first summoner spell used by this participant
             */
            spell1Id: number;
        };
        /**
         * SummonerDTO
         * @description represents a summoner
         */
        "summoner-v4.SummonerDTO": {
            /** @description Encrypted account ID. Max length 56 characters. */
            accountId: string;
            /**
             * Format: int32
             * @description ID of the summoner icon associated with the summoner.
             */
            profileIconId: number;
            /**
             * Format: int64
             * @description Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change
             */
            revisionDate: number;
            /** @description Summoner name. */
            name: string;
            /** @description Encrypted summoner ID. Max length 63 characters. */
            id: string;
            /** @description Encrypted PUUID. Exact length of 78 characters. */
            puuid: string;
            /**
             * Format: int64
             * @description Summoner level associated with the summoner.
             */
            summonerLevel: number;
        };
        /** LeagueListDTO */
        "tft-league-v1.LeagueListDTO": {
            leagueId?: string;
            entries: components["schemas"]["tft-league-v1.LeagueItemDTO"][];
            tier: string;
            name?: string;
            queue?: string;
        };
        /** LeagueItemDTO */
        "tft-league-v1.LeagueItemDTO": {
            freshBlood: boolean;
            /**
             * Format: int32
             * @description First placement.
             */
            wins: number;
            summonerName: string;
            miniSeries?: components["schemas"]["tft-league-v1.MiniSeriesDTO"];
            inactive: boolean;
            veteran: boolean;
            hotStreak: boolean;
            rank: string;
            /** Format: int32 */
            leaguePoints: number;
            /**
             * Format: int32
             * @description Second through eighth placement.
             */
            losses: number;
            /** @description Player's encrypted summonerId. */
            summonerId: string;
        };
        /** MiniSeriesDTO */
        "tft-league-v1.MiniSeriesDTO": {
            /** Format: int32 */
            losses: number;
            progress: string;
            /** Format: int32 */
            target: number;
            /** Format: int32 */
            wins: number;
        };
        /** LeagueEntryDTO */
        "tft-league-v1.LeagueEntryDTO": {
            /** @description Player Universal Unique Identifier. Exact length of 78 characters. (Encrypted) */
            puuid?: string;
            /** @description Not included for the RANKED_TFT_TURBO queueType. */
            leagueId?: string;
            /** @description Player's encrypted summonerId. */
            summonerId: string;
            summonerName: string;
            queueType: string;
            /**
             * @description Only included for the RANKED_TFT_TURBO queueType.
             *                  (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY)
             * @enum {string}
             */
            ratedTier?: "ORANGE" | "PURPLE" | "BLUE" | "GREEN" | "GRAY";
            /**
             * Format: int32
             * @description Only included for the RANKED_TFT_TURBO queueType.
             */
            ratedRating?: number;
            /** @description Not included for the RANKED_TFT_TURBO queueType. */
            tier?: string;
            /** @description The player's division within a tier. Not included for the RANKED_TFT_TURBO queueType. */
            rank?: string;
            /**
             * Format: int32
             * @description Not included for the RANKED_TFT_TURBO queueType.
             */
            leaguePoints?: number;
            /**
             * Format: int32
             * @description First placement.
             */
            wins: number;
            /**
             * Format: int32
             * @description Second through eighth placement.
             */
            losses: number;
            /** @description Not included for the RANKED_TFT_TURBO queueType. */
            hotStreak?: boolean;
            /** @description Not included for the RANKED_TFT_TURBO queueType. */
            veteran?: boolean;
            /** @description Not included for the RANKED_TFT_TURBO queueType. */
            freshBlood?: boolean;
            /** @description Not included for the RANKED_TFT_TURBO queueType. */
            inactive?: boolean;
            /** @description Not included for the RANKED_TFT_TURBO queueType. */
            miniSeries?: components["schemas"]["tft-league-v1.MiniSeriesDTO"];
        };
        /** TopRatedLadderEntryDto */
        "tft-league-v1.TopRatedLadderEntryDto": {
            summonerId: string;
            summonerName: string;
            /**
             * @description (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY)
             * @enum {string}
             */
            ratedTier: "ORANGE" | "PURPLE" | "BLUE" | "GREEN" | "GRAY";
            /** Format: int32 */
            ratedRating: number;
            /**
             * Format: int32
             * @description First placement.
             */
            wins: number;
            /** Format: int32 */
            previousUpdateLadderPosition: number;
        };
        /** MatchDto */
        "tft-match-v1.MatchDto": {
            /** @description Match metadata. */
            metadata: components["schemas"]["tft-match-v1.MetadataDto"];
            /** @description Match info. */
            info: components["schemas"]["tft-match-v1.InfoDto"];
        };
        /** MetadataDto */
        "tft-match-v1.MetadataDto": {
            /** @description Match data version. */
            data_version: string;
            /** @description Match id. */
            match_id: string;
            /** @description A list of participant PUUIDs. */
            participants: string[];
        };
        /** InfoDto */
        "tft-match-v1.InfoDto": {
            tft_game_type?: string;
            tft_set_core_name?: string;
            /**
             * Format: int64
             * @description Unix timestamp.
             */
            game_datetime: number;
            /**
             * Format: float
             * @description Game length in seconds.
             */
            game_length: number;
            /** @description Game variation key. Game variations documented in TFT static data. */
            game_variation?: string;
            /** @description Game client version. */
            game_version: string;
            participants: components["schemas"]["tft-match-v1.ParticipantDto"][];
            /**
             * Format: int32
             * @description Please refer to the League of Legends documentation.
             */
            queue_id: number;
            /**
             * Format: int32
             * @description Teamfight Tactics set number.
             */
            tft_set_number: number;
        };
        /** ParticipantDto */
        "tft-match-v1.ParticipantDto": {
            augments?: string[];
            /** Format: int32 */
            partner_group_id?: number;
            /** @description Participant's companion. */
            companion: components["schemas"]["tft-match-v1.CompanionDto"];
            /**
             * Format: int32
             * @description Gold left after participant was eliminated.
             */
            gold_left: number;
            /**
             * Format: int32
             * @description The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5.
             */
            last_round: number;
            /**
             * Format: int32
             * @description Participant Little Legend level. Note: This is not the number of active units.
             */
            level: number;
            /**
             * Format: int32
             * @description Participant placement upon elimination.
             */
            placement: number;
            /**
             * Format: int32
             * @description Number of players the participant eliminated.
             */
            players_eliminated: number;
            puuid: string;
            /**
             * Format: float
             * @description The number of seconds before the participant was eliminated.
             */
            time_eliminated: number;
            /**
             * Format: int32
             * @description Damage the participant dealt to other players.
             */
            total_damage_to_players: number;
            /** @description A complete list of traits for the participant's active units. */
            traits: components["schemas"]["tft-match-v1.TraitDto"][];
            /** @description A list of active units for the participant. */
            units: components["schemas"]["tft-match-v1.UnitDto"][];
        };
        /** TraitDto */
        "tft-match-v1.TraitDto": {
            /** @description Trait name. */
            name: string;
            /**
             * Format: int32
             * @description Number of units with this trait.
             */
            num_units: number;
            /**
             * Format: int32
             * @description Current style for this trait. (0 = No style, 1 = Bronze, 2 = Silver, 3 = Gold, 4 = Chromatic)
             */
            style?: number;
            /**
             * Format: int32
             * @description Current active tier for the trait.
             */
            tier_current: number;
            /**
             * Format: int32
             * @description Total tiers for the trait.
             */
            tier_total?: number;
        };
        /** UnitDto */
        "tft-match-v1.UnitDto": {
            itemNames?: string[];
            /** @description A list of the unit's items. Please refer to the Teamfight Tactics documentation for item ids. */
            items?: number[];
            /** @description This field was introduced in patch 9.22 with data_version 2. */
            character_id: string;
            /** @description If a unit is chosen as part of the Fates set mechanic, the chosen trait will be indicated by this field. Otherwise this field is excluded from the response. */
            chosen?: string;
            /** @description Unit name. This field is often left blank. */
            name: string;
            /**
             * Format: int32
             * @description Unit rarity. This doesn't equate to the unit cost.
             */
            rarity: number;
            /**
             * Format: int32
             * @description Unit tier.
             */
            tier: number;
        };
        /** CompanionDto */
        "tft-match-v1.CompanionDto": {
            /** Format: int32 */
            item_ID?: number;
            /** Format: int32 */
            skin_ID: number;
            content_ID: string;
            species: string;
        };
        /** PlatformDataDto */
        "tft-status-v1.PlatformDataDto": {
            id: string;
            name: string;
            locales: string[];
            maintenances: components["schemas"]["tft-status-v1.StatusDto"][];
            incidents: components["schemas"]["tft-status-v1.StatusDto"][];
        };
        /** StatusDto */
        "tft-status-v1.StatusDto": {
            /** Format: int32 */
            id: number;
            /**
             * @description (Legal values:  scheduled,  in_progress,  complete)
             * @enum {string}
             */
            maintenance_status: "scheduled" | "in_progress" | "complete";
            /**
             * @description (Legal values:  info,  warning,  critical)
             * @enum {string}
             */
            incident_severity: "info" | "warning" | "critical";
            titles: components["schemas"]["tft-status-v1.ContentDto"][];
            updates: components["schemas"]["tft-status-v1.UpdateDto"][];
            created_at: string;
            archive_at: string;
            updated_at: string;
            /** @description (Legal values: windows, macos, android, ios, ps4, xbone, switch) */
            platforms: ("windows" | "macos" | "android" | "ios" | "ps4" | "xbone" | "switch")[];
        };
        /** ContentDto */
        "tft-status-v1.ContentDto": {
            locale: string;
            content: string;
        };
        /** UpdateDto */
        "tft-status-v1.UpdateDto": {
            /** Format: int32 */
            id: number;
            author: string;
            publish: boolean;
            /** @description (Legal values: riotclient, riotstatus, game) */
            publish_locations: ("riotclient" | "riotstatus" | "game")[];
            translations: components["schemas"]["tft-status-v1.ContentDto"][];
            created_at: string;
            updated_at: string;
        };
        /**
         * SummonerDTO
         * @description represents a summoner
         */
        "tft-summoner-v1.SummonerDTO": {
            /** @description Encrypted account ID. Max length 56 characters. */
            accountId: string;
            /**
             * Format: int32
             * @description ID of the summoner icon associated with the summoner.
             */
            profileIconId: number;
            /**
             * Format: int64
             * @description Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: summoner name change, summoner level change, or profile icon change.
             */
            revisionDate: number;
            /** @description Summoner name. */
            name: string;
            /** @description Encrypted summoner ID. Max length 63 characters. */
            id: string;
            /** @description Encrypted PUUID. Exact length of 78 characters. */
            puuid: string;
            /**
             * Format: int64
             * @description Summoner level associated with the summoner.
             */
            summonerLevel: number;
        };
        /** TournamentCodeParametersV5 */
        "tournament-stub-v5.TournamentCodeParametersV5": {
            /** @description Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future. */
            allowedParticipants?: string[];
            /** @description Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game. */
            metadata?: string;
            /**
             * Format: int32
             * @description The team size of the game. Valid values are 1-5.
             */
            teamSize: number;
            /**
             * @description The pick type of the game.
             *                  (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
             * @enum {string}
             */
            pickType: "BLIND_PICK" | "DRAFT_MODE" | "ALL_RANDOM" | "TOURNAMENT_DRAFT";
            /**
             * @description The map type of the game.
             *                  (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)
             * @enum {string}
             */
            mapType: "SUMMONERS_RIFT" | "HOWLING_ABYSS";
            /**
             * @description The spectator type of the game.
             *                  (Legal values:  NONE,  LOBBYONLY,  ALL)
             * @enum {string}
             */
            spectatorType: "NONE" | "LOBBYONLY" | "ALL";
            /** @description Checks if allowed participants are enough to make full teams. */
            enoughPlayers: boolean;
        };
        /** TournamentCodeV5DTO */
        "tournament-stub-v5.TournamentCodeV5DTO": {
            /** @description The tournament code. */
            code: string;
            /** @description The spectator mode for the tournament code game. */
            spectators: string;
            /** @description The lobby name for the tournament code game. */
            lobbyName: string;
            /** @description The metadata for tournament code. */
            metaData: string;
            /** @description The password for the tournament code game. */
            password: string;
            /**
             * Format: int32
             * @description The team size for the tournament code game.
             */
            teamSize: number;
            /**
             * Format: int32
             * @description The provider's ID.
             */
            providerId: number;
            /** @description The pick mode for tournament code game. */
            pickType: string;
            /**
             * Format: int32
             * @description The tournament's ID.
             */
            tournamentId: number;
            /**
             * Format: int32
             * @description The tournament code's ID.
             */
            id: number;
            /**
             * @description The tournament code's region.
             *                  (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR)
             * @enum {string}
             */
            region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR" | "KR";
            /** @description The game map for the tournament code game */
            map: string;
            /** @description The puuids of the participants (Encrypted) */
            participants: string[];
        };
        /** LobbyEventV5DTOWrapper */
        "tournament-stub-v5.LobbyEventV5DTOWrapper": {
            eventList: components["schemas"]["tournament-stub-v5.LobbyEventV5DTO"][];
        };
        /** LobbyEventV5DTO */
        "tournament-stub-v5.LobbyEventV5DTO": {
            /** @description Timestamp from the event */
            timestamp: string;
            /** @description The type of event that was triggered */
            eventType: string;
            /** @description The puuid that triggered the event (Encrypted) */
            puuid: string;
        };
        /** ProviderRegistrationParametersV5 */
        "tournament-stub-v5.ProviderRegistrationParametersV5": {
            /**
             * @description The region in which the provider will be running tournaments.
             *                  (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR)
             * @enum {string}
             */
            region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR" | "KR";
            /** @description The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443). */
            url: string;
        };
        /** TournamentRegistrationParametersV5 */
        "tournament-stub-v5.TournamentRegistrationParametersV5": {
            /**
             * Format: int32
             * @description The provider ID to specify the regional registered provider data to associate this tournament.
             */
            providerId: number;
            /** @description The optional name of the tournament. */
            name?: string;
        };
        /** TournamentCodeParametersV5 */
        "tournament-v5.TournamentCodeParametersV5": {
            /** @description Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future. */
            allowedParticipants?: string[];
            /** @description Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game. */
            metadata?: string;
            /**
             * Format: int32
             * @description The team size of the game. Valid values are 1-5.
             */
            teamSize: number;
            /**
             * @description The pick type of the game.
             *                  (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
             * @enum {string}
             */
            pickType: "BLIND_PICK" | "DRAFT_MODE" | "ALL_RANDOM" | "TOURNAMENT_DRAFT";
            /**
             * @description The map type of the game.
             *                  (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)
             * @enum {string}
             */
            mapType: "SUMMONERS_RIFT" | "HOWLING_ABYSS";
            /**
             * @description The spectator type of the game.
             *                  (Legal values:  NONE,  LOBBYONLY,  ALL)
             * @enum {string}
             */
            spectatorType: "NONE" | "LOBBYONLY" | "ALL";
            /** @description Checks if allowed participants are enough to make full teams. */
            enoughPlayers: boolean;
        };
        /** TournamentCodeV5DTO */
        "tournament-v5.TournamentCodeV5DTO": {
            /** @description The tournament code. */
            code: string;
            /** @description The spectator mode for the tournament code game. */
            spectators: string;
            /** @description The lobby name for the tournament code game. */
            lobbyName: string;
            /** @description The metadata for tournament code. */
            metaData: string;
            /** @description The password for the tournament code game. */
            password: string;
            /**
             * Format: int32
             * @description The team size for the tournament code game.
             */
            teamSize: number;
            /**
             * Format: int32
             * @description The provider's ID.
             */
            providerId: number;
            /** @description The pick mode for tournament code game. */
            pickType: string;
            /**
             * Format: int32
             * @description The tournament's ID.
             */
            tournamentId: number;
            /**
             * Format: int32
             * @description The tournament code's ID.
             */
            id: number;
            /**
             * @description The tournament code's region.
             *                  (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR)
             * @enum {string}
             */
            region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR" | "KR";
            /** @description The game map for the tournament code game */
            map: string;
            /** @description The puuids of the participants (Encrypted) */
            participants: string[];
        };
        /** TournamentCodeUpdateParametersV5 */
        "tournament-v5.TournamentCodeUpdateParametersV5": {
            /** @description Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future. */
            allowedParticipants?: string[];
            /**
             * @description The pick type
             *                  (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
             * @enum {string}
             */
            pickType: "BLIND_PICK" | "DRAFT_MODE" | "ALL_RANDOM" | "TOURNAMENT_DRAFT";
            /**
             * @description The map type
             *                  (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS)
             * @enum {string}
             */
            mapType: "SUMMONERS_RIFT" | "HOWLING_ABYSS";
            /**
             * @description The spectator type
             *                  (Legal values:  NONE,  LOBBYONLY,  ALL)
             * @enum {string}
             */
            spectatorType: "NONE" | "LOBBYONLY" | "ALL";
        };
        /** TournamentGamesV5 */
        "tournament-v5.TournamentGamesV5": {
            winningTeam: components["schemas"]["tournament-v5.TournamentTeamV5"][];
            losingTeam: components["schemas"]["tournament-v5.TournamentTeamV5"][];
            /** @description Tournament Code */
            shortCode: string;
            /** @description Metadata for the TournamentCode */
            metaData: string;
            /** Format: int64 */
            gameId: number;
            gameName: string;
            gameType: string;
            /**
             * Format: int32
             * @description Game Map ID
             */
            gameMap: number;
            gameMode: string;
            /** @description Region of the game */
            region: string;
        };
        /** TournamentTeamV5 */
        "tournament-v5.TournamentTeamV5": {
            /** @description Player Unique UUID (Encrypted) */
            puuid: string;
        };
        /** LobbyEventV5DTOWrapper */
        "tournament-v5.LobbyEventV5DTOWrapper": {
            eventList: components["schemas"]["tournament-v5.LobbyEventV5DTO"][];
        };
        /** LobbyEventV5DTO */
        "tournament-v5.LobbyEventV5DTO": {
            /** @description Timestamp from the event */
            timestamp: string;
            /** @description The type of event that was triggered */
            eventType: string;
            /** @description The puuid that triggered the event (Encrypted) */
            puuid: string;
        };
        /** ProviderRegistrationParametersV5 */
        "tournament-v5.ProviderRegistrationParametersV5": {
            /**
             * @description The region in which the provider will be running tournaments.
             *                  (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR)
             * @enum {string}
             */
            region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR" | "KR";
            /** @description The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443). */
            url: string;
        };
        /** TournamentRegistrationParametersV5 */
        "tournament-v5.TournamentRegistrationParametersV5": {
            /**
             * Format: int32
             * @description The provider ID to specify the regional registered provider data to associate this tournament.
             */
            providerId: number;
            /** @description The optional name of the tournament. */
            name?: string;
        };
        /** ContentDto */
        "val-content-v1.ContentDto": {
            version: string;
            characters: components["schemas"]["val-content-v1.ContentItemDto"][];
            maps: components["schemas"]["val-content-v1.ContentItemDto"][];
            chromas: components["schemas"]["val-content-v1.ContentItemDto"][];
            skins: components["schemas"]["val-content-v1.ContentItemDto"][];
            skinLevels: components["schemas"]["val-content-v1.ContentItemDto"][];
            equips: components["schemas"]["val-content-v1.ContentItemDto"][];
            gameModes: components["schemas"]["val-content-v1.ContentItemDto"][];
            sprays: components["schemas"]["val-content-v1.ContentItemDto"][];
            sprayLevels: components["schemas"]["val-content-v1.ContentItemDto"][];
            charms: components["schemas"]["val-content-v1.ContentItemDto"][];
            charmLevels: components["schemas"]["val-content-v1.ContentItemDto"][];
            playerCards: components["schemas"]["val-content-v1.ContentItemDto"][];
            playerTitles: components["schemas"]["val-content-v1.ContentItemDto"][];
            acts: components["schemas"]["val-content-v1.ActDto"][];
            ceremonies?: components["schemas"]["val-content-v1.ContentItemDto"][];
            /** @description Unknown type, this is a placeholder subject to change. */
            totems?: string[];
        };
        /** ContentItemDto */
        "val-content-v1.ContentItemDto": {
            name: string;
            /** @description This field is excluded from the response when a locale is set */
            localizedNames?: components["schemas"]["val-content-v1.LocalizedNamesDto"];
            id: string;
            assetName: string;
            /** @description This field is only included for maps and game modes. These values are used in the match response. */
            assetPath?: string;
        };
        /** LocalizedNamesDto */
        "val-content-v1.LocalizedNamesDto": {
            "ar-AE": string;
            "de-DE": string;
            "en-GB"?: string;
            "en-US": string;
            "es-ES": string;
            "es-MX": string;
            "fr-FR": string;
            "id-ID": string;
            "it-IT": string;
            "ja-JP": string;
            "ko-KR": string;
            "pl-PL": string;
            "pt-BR": string;
            "ru-RU": string;
            "th-TH": string;
            "tr-TR": string;
            "vi-VN": string;
            "zh-CN": string;
            "zh-TW": string;
        };
        /** ActDto */
        "val-content-v1.ActDto": {
            name: string;
            /** @description This field is excluded from the response when a locale is set */
            localizedNames?: components["schemas"]["val-content-v1.LocalizedNamesDto"];
            id: string;
            isActive: boolean;
            parentId?: string;
            type?: string;
        };
        /** MatchDto */
        "val-match-v1.MatchDto": {
            matchInfo: components["schemas"]["val-match-v1.MatchInfoDto"];
            players: components["schemas"]["val-match-v1.PlayerDto"][];
            coaches: components["schemas"]["val-match-v1.CoachDto"][];
            teams: components["schemas"]["val-match-v1.TeamDto"][];
            roundResults: components["schemas"]["val-match-v1.RoundResultDto"][];
        };
        /** MatchInfoDto */
        "val-match-v1.MatchInfoDto": {
            matchId: string;
            mapId: string;
            /** Format: int32 */
            gameLengthMillis: number;
            /** Format: int64 */
            gameStartMillis: number;
            provisioningFlowId: string;
            isCompleted: boolean;
            customGameName: string;
            queueId: string;
            gameMode: string;
            isRanked: boolean;
            seasonId: string;
        };
        /** PlayerDto */
        "val-match-v1.PlayerDto": {
            puuid: string;
            gameName: string;
            tagLine: string;
            teamId: string;
            partyId: string;
            characterId: string;
            stats: components["schemas"]["val-match-v1.PlayerStatsDto"];
            /** Format: int32 */
            competitiveTier: number;
            playerCard: string;
            playerTitle: string;
        };
        /** PlayerStatsDto */
        "val-match-v1.PlayerStatsDto": {
            /** Format: int32 */
            score: number;
            /** Format: int32 */
            roundsPlayed: number;
            /** Format: int32 */
            kills: number;
            /** Format: int32 */
            deaths: number;
            /** Format: int32 */
            assists: number;
            /** Format: int32 */
            playtimeMillis: number;
            abilityCasts: components["schemas"]["val-match-v1.AbilityCastsDto"];
        };
        /** AbilityCastsDto */
        "val-match-v1.AbilityCastsDto": {
            /** Format: int32 */
            grenadeCasts: number;
            /** Format: int32 */
            ability1Casts: number;
            /** Format: int32 */
            ability2Casts: number;
            /** Format: int32 */
            ultimateCasts: number;
        };
        /** CoachDto */
        "val-match-v1.CoachDto": {
            puuid: string;
            teamId: string;
        };
        /** TeamDto */
        "val-match-v1.TeamDto": {
            /** @description This is an arbitrary string. Red and Blue in bomb modes. The puuid of the player in deathmatch. */
            teamId: string;
            won: boolean;
            /** Format: int32 */
            roundsPlayed: number;
            /** Format: int32 */
            roundsWon: number;
            /**
             * Format: int32
             * @description Team points scored. Number of kills in deathmatch.
             */
            numPoints: number;
        };
        /** RoundResultDto */
        "val-match-v1.RoundResultDto": {
            /** Format: int32 */
            roundNum: number;
            roundResult: string;
            roundCeremony: string;
            winningTeam: string;
            /** @description PUUID of player */
            bombPlanter: string;
            /** @description PUUID of player */
            bombDefuser: string;
            /** Format: int32 */
            plantRoundTime: number;
            plantPlayerLocations: components["schemas"]["val-match-v1.PlayerLocationsDto"][];
            plantLocation: components["schemas"]["val-match-v1.LocationDto"];
            plantSite: string;
            /** Format: int32 */
            defuseRoundTime: number;
            defusePlayerLocations: components["schemas"]["val-match-v1.PlayerLocationsDto"][];
            defuseLocation: components["schemas"]["val-match-v1.LocationDto"];
            playerStats: components["schemas"]["val-match-v1.PlayerRoundStatsDto"][];
            roundResultCode: string;
        };
        /** PlayerLocationsDto */
        "val-match-v1.PlayerLocationsDto": {
            puuid: string;
            /** Format: float */
            viewRadians: number;
            location: components["schemas"]["val-match-v1.LocationDto"];
        };
        /** LocationDto */
        "val-match-v1.LocationDto": {
            /** Format: int32 */
            x: number;
            /** Format: int32 */
            y: number;
        };
        /** PlayerRoundStatsDto */
        "val-match-v1.PlayerRoundStatsDto": {
            puuid: string;
            kills: components["schemas"]["val-match-v1.KillDto"][];
            damage: components["schemas"]["val-match-v1.DamageDto"][];
            /** Format: int32 */
            score: number;
            economy: components["schemas"]["val-match-v1.EconomyDto"];
            ability: components["schemas"]["val-match-v1.AbilityDto"];
        };
        /** KillDto */
        "val-match-v1.KillDto": {
            /** Format: int32 */
            timeSinceGameStartMillis: number;
            /** Format: int32 */
            timeSinceRoundStartMillis: number;
            /** @description PUUID */
            killer: string;
            /** @description PUUID */
            victim: string;
            victimLocation: components["schemas"]["val-match-v1.LocationDto"];
            /** @description List of PUUIDs */
            assistants: string[];
            playerLocations: components["schemas"]["val-match-v1.PlayerLocationsDto"][];
            finishingDamage: components["schemas"]["val-match-v1.FinishingDamageDto"];
        };
        /** FinishingDamageDto */
        "val-match-v1.FinishingDamageDto": {
            damageType: string;
            damageItem: string;
            isSecondaryFireMode: boolean;
        };
        /** DamageDto */
        "val-match-v1.DamageDto": {
            /** @description PUUID */
            receiver: string;
            /** Format: int32 */
            damage: number;
            /** Format: int32 */
            legshots: number;
            /** Format: int32 */
            bodyshots: number;
            /** Format: int32 */
            headshots: number;
        };
        /** EconomyDto */
        "val-match-v1.EconomyDto": {
            /** Format: int32 */
            loadoutValue: number;
            weapon: string;
            armor: string;
            /** Format: int32 */
            remaining: number;
            /** Format: int32 */
            spent: number;
        };
        /** AbilityDto */
        "val-match-v1.AbilityDto": {
            grenadeEffects: string;
            ability1Effects: string;
            ability2Effects: string;
            ultimateEffects: string;
        };
        /** MatchlistDto */
        "val-match-v1.MatchlistDto": {
            puuid: string;
            history: components["schemas"]["val-match-v1.MatchlistEntryDto"][];
        };
        /** MatchlistEntryDto */
        "val-match-v1.MatchlistEntryDto": {
            matchId: string;
            /** Format: int64 */
            gameStartTimeMillis: number;
            queueId: string;
        };
        /** RecentMatchesDto */
        "val-match-v1.RecentMatchesDto": {
            /** Format: int64 */
            currentTime: number;
            /** @description A list of recent match ids. */
            matchIds: string[];
        };
        /** LeaderboardDto */
        "val-ranked-v1.LeaderboardDto": {
            /** @description The shard for the given leaderboard. */
            shard: string;
            /** @description The act id for the given leaderboard. Act ids can be found using the val-content API. */
            actId: string;
            /**
             * Format: int64
             * @description The total number of players in the leaderboard.
             */
            totalPlayers: number;
            players: components["schemas"]["val-ranked-v1.PlayerDto"][];
            /** Format: int64 */
            immortalStartingPage?: number;
            /** Format: int64 */
            immortalStartingIndex?: number;
            /** Format: int64 */
            topTierRRThreshold?: number;
            tierDetails?: {
                [key: string]: components["schemas"]["val-ranked-v1.TierDetailDto"] | undefined;
            };
            /** Format: int64 */
            startIndex?: number;
            query?: string;
        };
        /** PlayerDto */
        "val-ranked-v1.PlayerDto": {
            /** @description This field may be omitted if the player has been anonymized. */
            puuid?: string;
            /** @description This field may be omitted if the player has been anonymized. */
            gameName?: string;
            /** @description This field may be omitted if the player has been anonymized. */
            tagLine?: string;
            /** Format: int64 */
            leaderboardRank: number;
            /** Format: int64 */
            rankedRating: number;
            /** Format: int64 */
            numberOfWins: number;
            /** Format: int64 */
            competitiveTier?: number;
        };
        /** PlatformDataDto */
        "val-status-v1.PlatformDataDto": {
            id: string;
            name: string;
            locales: string[];
            maintenances: components["schemas"]["val-status-v1.StatusDto"][];
            incidents: components["schemas"]["val-status-v1.StatusDto"][];
        };
        /** StatusDto */
        "val-status-v1.StatusDto": {
            /** Format: int32 */
            id: number;
            /**
             * @description (Legal values:  scheduled,  in_progress,  complete)
             * @enum {string}
             */
            maintenance_status: "scheduled" | "in_progress" | "complete";
            /**
             * @description (Legal values:  info,  warning,  critical)
             * @enum {string}
             */
            incident_severity: "info" | "warning" | "critical";
            titles: components["schemas"]["val-status-v1.ContentDto"][];
            updates: components["schemas"]["val-status-v1.UpdateDto"][];
            created_at: string;
            archive_at: string;
            updated_at: string;
            /** @description (Legal values: windows, macos, android, ios, ps4, xbone, switch) */
            platforms: ("windows" | "macos" | "android" | "ios" | "ps4" | "xbone" | "switch")[];
        };
        /** ContentDto */
        "val-status-v1.ContentDto": {
            locale: string;
            content: string;
        };
        /** UpdateDto */
        "val-status-v1.UpdateDto": {
            /** Format: int32 */
            id: number;
            author: string;
            publish: boolean;
            /** @description (Legal values: riotclient, riotstatus, game) */
            publish_locations: ("riotclient" | "riotstatus" | "game")[];
            translations: components["schemas"]["val-status-v1.ContentDto"][];
            created_at: string;
            updated_at: string;
        };
        /** ParticipantChallenges */
        "match-v5.ParticipantChallenges": {
            /** Format: double */
            "12AssistStreakCount"?: number;
            /** Format: double */
            abilityUses?: number;
            /** Format: double */
            acesBefore15Minutes?: number;
            /** Format: double */
            alliedJungleMonsterKills?: number;
            /** Format: double */
            baronBuffGoldAdvantageOverThreshold?: number;
            /** Format: double */
            baronTakedowns?: number;
            /** Format: double */
            blastConeOppositeOpponentCount?: number;
            /** Format: double */
            bountyGold?: number;
            /** Format: double */
            buffsStolen?: number;
            /** Format: double */
            completeSupportQuestInTime?: number;
            /** Format: double */
            controlWardsPlaced?: number;
            /** Format: double */
            controlWardTimeCoverageInRiverOrEnemyHalf?: number;
            /** Format: double */
            damagePerMinute?: number;
            /** Format: double */
            damageTakenOnTeamPercentage?: number;
            /** Format: double */
            dancedWithRiftHerald?: number;
            /** Format: double */
            deathsByEnemyChamps?: number;
            /** Format: double */
            dodgeSkillShotsSmallWindow?: number;
            /** Format: double */
            doubleAces?: number;
            /** Format: double */
            dragonTakedowns?: number;
            /** Format: double */
            earliestBaron?: number;
            /** Format: double */
            earliestDragonTakedown?: number;
            /** Format: double */
            earliestElderDragon?: number;
            /** Format: double */
            earlyLaningPhaseGoldExpAdvantage?: number;
            /** Format: double */
            effectiveHealAndShielding?: number;
            /** Format: double */
            elderDragonKillsWithOpposingSoul?: number;
            /** Format: double */
            elderDragonMultikills?: number;
            /** Format: double */
            enemyChampionImmobilizations?: number;
            /** Format: double */
            enemyJungleMonsterKills?: number;
            /** Format: double */
            epicMonsterKillsNearEnemyJungler?: number;
            /** Format: double */
            epicMonsterKillsWithin30SecondsOfSpawn?: number;
            /** Format: double */
            epicMonsterSteals?: number;
            /** Format: double */
            epicMonsterStolenWithoutSmite?: number;
            /** Format: double */
            fasterSupportQuestCompletion?: number;
            /** Format: double */
            fastestLegendary?: number;
            /** Format: double */
            firstTurretKilled?: number;
            /** Format: double */
            firstTurretKilledTime?: number;
            /** Format: double */
            flawlessAces?: number;
            /** Format: double */
            fullTeamTakedown?: number;
            /** Format: double */
            gameLength?: number;
            /** Format: double */
            getTakedownsInAllLanesEarlyJungleAsLaner?: number;
            /** Format: double */
            goldPerMinute?: number;
            /** Format: double */
            hadAfkTeammate?: number;
            /** Format: double */
            hadOpenNexus?: number;
            /** Format: double */
            highestChampionDamage?: number;
            /** Format: double */
            highestCrowdControlScore?: number;
            /** Format: double */
            highestWardKills?: number;
            /** Format: double */
            immobilizeAndKillWithAlly?: number;
            /** Format: double */
            initialBuffCount?: number;
            /** Format: double */
            initialCrabCount?: number;
            /** Format: double */
            jungleCsBefore10Minutes?: number;
            /** Format: double */
            junglerKillsEarlyJungle?: number;
            /** Format: double */
            junglerTakedownsNearDamagedEpicMonster?: number;
            /** Format: double */
            kda?: number;
            /** Format: double */
            killAfterHiddenWithAlly?: number;
            /** Format: double */
            killedChampTookFullTeamDamageSurvived?: number;
            /** Format: double */
            killingSprees?: number;
            /** Format: double */
            killParticipation?: number;
            /** Format: double */
            killsNearEnemyTurret?: number;
            /** Format: double */
            killsOnLanersEarlyJungleAsJungler?: number;
            /** Format: double */
            killsOnOtherLanesEarlyJungleAsLaner?: number;
            /** Format: double */
            killsOnRecentlyHealedByAramPack?: number;
            /** Format: double */
            killsUnderOwnTurret?: number;
            /** Format: double */
            killsWithHelpFromEpicMonster?: number;
            /** Format: double */
            knockEnemyIntoTeamAndKill?: number;
            /** Format: double */
            kTurretsDestroyedBeforePlatesFall?: number;
            /** Format: double */
            landSkillShotsEarlyGame?: number;
            /** Format: double */
            laneMinionsFirst10Minutes?: number;
            /** Format: double */
            laningPhaseGoldExpAdvantage?: number;
            /** Format: double */
            legendaryCount?: number;
            /** Format: double */
            lostAnInhibitor?: number;
            /** Format: double */
            maxCsAdvantageOnLaneOpponent?: number;
            /** Format: double */
            maxKillDeficit?: number;
            /** Format: double */
            maxLevelLeadLaneOpponent?: number;
            /** Format: double */
            mejaisFullStackInTime?: number;
            /** Format: double */
            moreEnemyJungleThanOpponent?: number;
            /** Format: double */
            mostWardsDestroyedOneSweeper?: number;
            /** Format: double */
            multiKillOneSpell?: number;
            /** Format: double */
            multikills?: number;
            /** Format: double */
            multikillsAfterAggressiveFlash?: number;
            /** Format: double */
            multiTurretRiftHeraldCount?: number;
            /** Format: double */
            mythicItemUsed?: number;
            /** Format: double */
            outerTurretExecutesBefore10Minutes?: number;
            /** Format: double */
            outnumberedKills?: number;
            /** Format: double */
            outnumberedNexusKill?: number;
            /** Format: double */
            perfectDragonSoulsTaken?: number;
            /** Format: double */
            perfectGame?: number;
            /** Format: double */
            pickKillWithAlly?: number;
            /** Format: double */
            playedChampSelectPosition?: number;
            /** Format: double */
            poroExplosions?: number;
            /** Format: double */
            quickCleanse?: number;
            /** Format: double */
            quickFirstTurret?: number;
            /** Format: double */
            quickSoloKills?: number;
            /** Format: double */
            riftHeraldTakedowns?: number;
            /** Format: double */
            saveAllyFromDeath?: number;
            /** Format: double */
            scuttleCrabKills?: number;
            /** Format: double */
            shortestTimeToAceFromFirstTakedown?: number;
            /** Format: double */
            skillshotsDodged?: number;
            /** Format: double */
            skillshotsHit?: number;
            /** Format: double */
            snowballsHit?: number;
            /** Format: double */
            soloBaronKills?: number;
            /** Format: double */
            soloKills?: number;
            /** Format: double */
            soloTurretsLategame?: number;
            /** Format: double */
            stealthWardsPlaced?: number;
            /** Format: double */
            survivedSingleDigitHpCount?: number;
            /** Format: double */
            survivedThreeImmobilizesInFight?: number;
            /** Format: double */
            takedownOnFirstTurret?: number;
            /** Format: double */
            takedowns?: number;
            /** Format: double */
            takedownsAfterGainingLevelAdvantage?: number;
            /** Format: double */
            takedownsBeforeJungleMinionSpawn?: number;
            /** Format: double */
            takedownsFirst25Minutes?: number;
            /** Format: double */
            takedownsFirstXMinutes?: number;
            /** Format: double */
            takedownsInAlcove?: number;
            /** Format: double */
            takedownsInEnemyFountain?: number;
            /** Format: double */
            teamBaronKills?: number;
            /** Format: double */
            teamDamagePercentage?: number;
            /** Format: double */
            teamElderDragonKills?: number;
            /** Format: double */
            teamRiftHeraldKills?: number;
            /** Format: double */
            teleportTakedowns?: number;
            /** Format: double */
            thirdInhibitorDestroyedTime?: number;
            /** Format: double */
            threeWardsOneSweeperCount?: number;
            /** Format: double */
            tookLargeDamageSurvived?: number;
            /** Format: double */
            turretPlatesTaken?: number;
            /** Format: double */
            turretsTakenWithRiftHerald?: number;
            /** Format: double */
            turretTakedowns?: number;
            /** Format: double */
            twentyMinionsIn3SecondsCount?: number;
            /** Format: int32 */
            twoWardsOneSweeperCount?: number;
            /** Format: double */
            unseenRecalls?: number;
            /** Format: double */
            visionScoreAdvantageLaneOpponent?: number;
            /** Format: double */
            visionScorePerMinute?: number;
            /** Format: double */
            wardsGuarded?: number;
            /** Format: double */
            wardTakedowns?: number;
            /** Format: double */
            wardTakedownsBefore20M?: number;
        };
        /** ParticipantMissions */
        "match-v5.ParticipantMissions": {
            /** Format: int32 */
            playerScore0: number;
            /** Format: int32 */
            playerScore1: number;
            /** Format: int32 */
            playerScore10: number;
            /** Format: int32 */
            playerScore11: number;
            /** Format: int32 */
            playerScore2: number;
            /** Format: int32 */
            playerScore3: number;
            /** Format: int32 */
            playerScore4: number;
            /** Format: int32 */
            playerScore5: number;
            /** Format: int32 */
            playerScore6: number;
            /** Format: int32 */
            playerScore7: number;
            /** Format: int32 */
            playerScore8: number;
            /** Format: int32 */
            playerScore9: number;
        };
        /** MatchTimelineInfoFrameEvent */
        "match-v5.MatchTimelineInfoFrameEvent": {
            /** Format: int64 */
            realTimestamp?: number;
            /** Format: int32 */
            timestamp: number;
            /**
             * @description Timeline event type.
             *     (Known legal values: ASCENDED_EVENT, BUILDING_KILL, CAPTURE_POINT, CHAMPION_KILL, CHAMPION_SPECIAL_KILL, CHAMPION_TRANSFORM, DRAGON_SOUL_GIVEN, ELITE_MONSTER_KILL, GAME_END, ITEM_DESTROYED, ITEM_PURCHASED, ITEM_SOLD, ITEM_UNDO, LEVEL_UP, PAUSE_END, PAUSE_START, SKILL_LEVEL_UP, TURRET_PLATE_DESTROYED, WARD_KILL, WARD_PLACED)
             * @enum {string}
             */
            type: "ASCENDED_EVENT" | "BUILDING_KILL" | "CAPTURE_POINT" | "CHAMPION_KILL" | "CHAMPION_SPECIAL_KILL" | "CHAMPION_TRANSFORM" | "DRAGON_SOUL_GIVEN" | "ELITE_MONSTER_KILL" | "GAME_END" | "ITEM_DESTROYED" | "ITEM_PURCHASED" | "ITEM_SOLD" | "ITEM_UNDO" | "LEVEL_UP" | "PAUSE_END" | "PAUSE_START" | "SKILL_LEVEL_UP" | "TURRET_PLATE_DESTROYED" | "WARD_KILL" | "WARD_PLACED";
            /** Format: int32 */
            itemId?: number;
            /** Format: int32 */
            participantId?: number;
            levelUpType?: string;
            /** Format: int32 */
            skillSlot?: number;
            /** Format: int32 */
            creatorId?: number;
            wardType?: string;
            /** Format: int32 */
            level?: number;
            assistingParticipantIds?: number[];
            /** Format: int32 */
            bounty?: number;
            /** Format: int32 */
            killStreakLength?: number;
            /** Format: int32 */
            killerId?: number;
            position?: components["schemas"]["match-v5.MatchTimelinePosition"];
            victimDamageDealt?: components["schemas"]["match-v5.MatchTimelineInfoFrameEventVictimDamageDealt"][];
            victimDamageReceived?: components["schemas"]["match-v5.MatchTimelineInfoFrameEventVictimDamageDealt"][];
            /** Format: int32 */
            victimId?: number;
            killType?: string;
            laneType?: string;
            /** Format: int32 */
            teamId?: number;
            /** Format: int32 */
            multiKillLength?: number;
            /** Format: int32 */
            killerTeamId?: number;
            monsterType?: string;
            monsterSubType?: string;
            buildingType?: string;
            towerType?: string;
            /** Format: int32 */
            afterId?: number;
            /** Format: int32 */
            beforeId?: number;
            /** Format: int32 */
            goldGain?: number;
            /** Format: int64 */
            gameId?: number;
            /** Format: int32 */
            winningTeam?: number;
            transformType?: string;
            name?: string;
            /** Format: int32 */
            shutdownBounty?: number;
            /** Format: int64 */
            actualStartTime?: number;
        };
        /** MatchTimelineInfoFrameParticipantFrameChampionStats */
        "match-v5.MatchTimelineInfoFrameParticipantFrameChampionStats": {
            /** Format: int32 */
            abilityHaste?: number;
            /** Format: int32 */
            abilityPower: number;
            /** Format: int32 */
            armor: number;
            /** Format: int32 */
            armorPen: number;
            /** Format: int32 */
            armorPenPercent: number;
            /** Format: int32 */
            attackDamage: number;
            /** Format: int32 */
            attackSpeed: number;
            /** Format: int32 */
            bonusArmorPenPercent: number;
            /** Format: int32 */
            bonusMagicPenPercent: number;
            /** Format: int32 */
            ccReduction: number;
            /** Format: int32 */
            cooldownReduction: number;
            /** Format: int32 */
            health: number;
            /** Format: int32 */
            healthMax: number;
            /** Format: int32 */
            healthRegen: number;
            /** Format: int32 */
            lifesteal: number;
            /** Format: int32 */
            magicPen: number;
            /** Format: int32 */
            magicPenPercent: number;
            /** Format: int32 */
            magicResist: number;
            /** Format: int32 */
            movementSpeed: number;
            /** Format: int32 */
            omnivamp?: number;
            /** Format: int32 */
            physicalVamp?: number;
            /** Format: int32 */
            power: number;
            /** Format: int32 */
            powerMax: number;
            /** Format: int32 */
            powerRegen: number;
            /** Format: int32 */
            spellVamp: number;
        };
        /** MatchTimelineInfoFrameParticipantFrameDamageStats */
        "match-v5.MatchTimelineInfoFrameParticipantFrameDamageStats": {
            /** Format: int32 */
            magicDamageDone: number;
            /** Format: int32 */
            magicDamageDoneToChampions: number;
            /** Format: int32 */
            magicDamageTaken: number;
            /** Format: int32 */
            physicalDamageDone: number;
            /** Format: int32 */
            physicalDamageDoneToChampions: number;
            /** Format: int32 */
            physicalDamageTaken: number;
            /** Format: int32 */
            totalDamageDone: number;
            /** Format: int32 */
            totalDamageDoneToChampions: number;
            /** Format: int32 */
            totalDamageTaken: number;
            /** Format: int32 */
            trueDamageDone: number;
            /** Format: int32 */
            trueDamageDoneToChampions: number;
            /** Format: int32 */
            trueDamageTaken: number;
        };
        /** MatchTimelinePosition */
        "match-v5.MatchTimelinePosition": {
            /** Format: int32 */
            x: number;
            /** Format: int32 */
            y: number;
        };
        /** MatchTimelineInfoFrameParticipantFrame */
        "match-v5.MatchTimelineInfoFrameParticipantFrame": {
            championStats: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrameChampionStats"];
            /** Format: int32 */
            currentGold: number;
            damageStats: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrameDamageStats"];
            /** Format: int32 */
            goldPerSecond: number;
            /** Format: int32 */
            jungleMinionsKilled: number;
            /** Format: int32 */
            level: number;
            /** Format: int32 */
            minionsKilled: number;
            /** Format: int32 */
            participantId: number;
            position: components["schemas"]["match-v5.MatchTimelinePosition"];
            /** Format: int32 */
            timeEnemySpentControlled: number;
            /** Format: int32 */
            totalGold: number;
            /** Format: int32 */
            xp: number;
        };
        /** MatchTimelineInfoFrameParticipantFrames */
        "match-v5.MatchTimelineInfoFrameParticipantFrames": {
            1: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrame"];
            2: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrame"];
            3: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrame"];
            4: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrame"];
            5: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrame"];
            6: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrame"];
            7: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrame"];
            8: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrame"];
            /** @description Possibly null for the Arena 2v2v2v2 (`CHERRY`) game mode. */
            9?: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrame"];
            /** @description Possibly null for the Arena 2v2v2v2 (`CHERRY`) game mode. */
            10?: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrame"];
        };
        /** MatchTimelineInfoFrame */
        "match-v5.MatchTimelineInfoFrame": {
            events: components["schemas"]["match-v5.MatchTimelineInfoFrameEvent"][];
            participantFrames: components["schemas"]["match-v5.MatchTimelineInfoFrameParticipantFrames"];
            /** Format: int32 */
            timestamp: number;
        };
        /** MatchTimelineInfoFrameEventVictimDamageReceived */
        "match-v5.MatchTimelineInfoFrameEventVictimDamageDealt": {
            basic: boolean;
            /** Format: int32 */
            magicDamage: number;
            name: string;
            /** Format: int32 */
            participantId: number;
            /** Format: int32 */
            physicalDamage: number;
            spellName: string;
            /** Format: int32 */
            spellSlot: number;
            /** Format: int32 */
            trueDamage: number;
            type: string;
        };
        /** MatchTimelineInfoParticipant */
        "match-v5.MatchTimelineInfoParticipant": {
            /** Format: int32 */
            participantId: number;
            puuid: string;
        };
        /** MatchTimelineInfo */
        "match-v5.MatchTimelineInfo": {
            /** Format: int32 */
            frameInterval: number;
            frames: components["schemas"]["match-v5.MatchTimelineInfoFrame"][];
            /** Format: int64 */
            gameId?: number;
            participants?: components["schemas"]["match-v5.MatchTimelineInfoParticipant"][];
        };
        /** TierDetailDto */
        "val-ranked-v1.TierDetailDto": {
            /** Format: int64 */
            rankedRatingThreshold: number;
            /** Format: int64 */
            startingPage: number;
            /** Format: int64 */
            startingIndex: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "account-v1.getByPuuid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                puuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account-v1.AccountDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "account-v1.getByRiotId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description When querying for a player by their riot id, the gameName and tagLine query params are required. */
                tagLine: string;
                /** @description When querying for a player by their riot id, the gameName and tagLine query params are required. */
                gameName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account-v1.AccountDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "account-v1.getByAccessToken": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account-v1.AccountDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "account-v1.getActiveShard": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                game: "val" | "lor";
                puuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["account-v1.ActiveShardDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "champion-mastery-v4.getAllChampionMasteriesByPUUID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                encryptedPUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["champion-mastery-v4.ChampionMasteryDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "champion-mastery-v4.getChampionMasteryByPUUID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                encryptedPUUID: string;
                /** @description Champion ID to retrieve Champion Mastery. */
                championId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["champion-mastery-v4.ChampionMasteryDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "champion-mastery-v4.getTopChampionMasteriesByPUUID": {
        parameters: {
            query?: {
                /** @description Number of entries to retrieve, defaults to 3. */
                count?: number;
            };
            header?: never;
            path: {
                encryptedPUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["champion-mastery-v4.ChampionMasteryDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "champion-mastery-v4.getAllChampionMasteries": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Summoner ID associated with the player */
                encryptedSummonerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["champion-mastery-v4.ChampionMasteryDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "champion-mastery-v4.getChampionMastery": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Champion ID to retrieve Champion Mastery for */
                championId: number;
                /** @description Summoner ID associated with the player */
                encryptedSummonerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["champion-mastery-v4.ChampionMasteryDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "champion-mastery-v4.getTopChampionMasteries": {
        parameters: {
            query?: {
                /** @description Number of entries to retrieve, defaults to 3 */
                count?: number;
            };
            header?: never;
            path: {
                /** @description Summoner ID associated with the player */
                encryptedSummonerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["champion-mastery-v4.ChampionMasteryDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "champion-mastery-v4.getChampionMasteryScoreByPUUID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                encryptedPUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "champion-mastery-v4.getChampionMasteryScore": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Summoner ID associated with the player */
                encryptedSummonerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "champion-v3.getChampionInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["champion-v3.ChampionInfo"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "clash-v1.getPlayersBySummoner": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                summonerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["clash-v1.PlayerDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "clash-v1.getTeamById": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["clash-v1.TeamDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "clash-v1.getTournaments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["clash-v1.TournamentDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "clash-v1.getTournamentByTeam": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["clash-v1.TournamentDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "clash-v1.getTournamentById": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tournamentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["clash-v1.TournamentDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "league-exp-v4.getLeagueEntries": {
        parameters: {
            query?: {
                /** @description Defaults to 1. Starts with page 1. */
                page?: number;
            };
            header?: never;
            path: {
                /** @description Note that the queue value must be a valid ranked queue. */
                queue: "RANKED_SOLO_5x5" | "RANKED_TFT" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT";
                tier: "CHALLENGER" | "GRANDMASTER" | "MASTER" | "DIAMOND" | "EMERALD" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON";
                division: "I" | "II" | "III" | "IV";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["league-exp-v4.LeagueEntryDTO"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "league-v4.getChallengerLeague": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["league-v4.LeagueListDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "league-v4.getLeagueEntriesForSummoner": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                encryptedSummonerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["league-v4.LeagueEntryDTO"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "league-v4.getLeagueEntries": {
        parameters: {
            query?: {
                /** @description Defaults to 1. Starts with page 1. */
                page?: number;
            };
            header?: never;
            path: {
                division: "I" | "II" | "III" | "IV";
                tier: "DIAMOND" | "EMERALD" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON";
                /** @description Note that the queue value must be a valid ranked queue. */
                queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["league-v4.LeagueEntryDTO"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "league-v4.getGrandmasterLeague": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["league-v4.LeagueListDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "league-v4.getLeagueById": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["league-v4.LeagueListDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "league-v4.getMasterLeague": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["league-v4.LeagueListDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lol-challenges-v1.getAllChallengeConfigs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lol-challenges-v1.ChallengeConfigInfoDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lol-challenges-v1.getAllChallengePercentiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: {
                            [key: string]: number | undefined;
                        } | undefined;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lol-challenges-v1.getChallengeConfigs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challengeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lol-challenges-v1.ChallengeConfigInfoDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lol-challenges-v1.getChallengeLeaderboards": {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                level: "NONE" | "IRON" | "BRONZE" | "SILVER" | "GOLD" | "PLATINUM" | "DIAMOND" | "MASTER" | "GRANDMASTER" | "CHALLENGER" | "HIGHEST_NOT_LEADERBOARD_ONLY" | "HIGHEST" | "LOWEST";
                challengeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lol-challenges-v1.ApexPlayerInfoDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lol-challenges-v1.getChallengePercentiles": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challengeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number | undefined;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lol-challenges-v1.getPlayerData": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                puuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lol-challenges-v1.PlayerInfoDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lol-status-v3.getShardData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lol-status-v3.ShardStatus"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lol-status-v4.getPlatformData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lol-status-v4.PlatformDataDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lor-deck-v1.getDecks": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lor-deck-v1.DeckDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lor-deck-v1.createDeck": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["lor-deck-v1.NewDeckDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lor-inventory-v1.getCards": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lor-inventory-v1.CardDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lor-match-v1.getMatchIdsByPUUID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                puuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lor-match-v1.getMatch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                matchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lor-match-v1.MatchDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lor-ranked-v1.getLeaderboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lor-ranked-v1.LeaderboardDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "lor-status-v1.getPlatformData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lor-status-v1.PlatformDataDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "match-v5.getMatchIdsByPUUID": {
        parameters: {
            query?: {
                /** @description Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any matches played before June 16th, 2021 won't be included in the results if the startTime filter is set. */
                startTime?: number;
                /** @description Epoch timestamp in seconds. */
                endTime?: number;
                /** @description Filter the list of match ids by a specific queue id. This filter is mutually inclusive of the type filter meaning any match ids returned must match both the queue and type filters. */
                queue?: number;
                /** @description Filter the list of match ids by the type of match. This filter is mutually inclusive of the queue filter meaning any match ids returned must match both the queue and type filters. */
                type?: "ranked" | "normal" | "tourney" | "tutorial";
                /** @description Defaults to 0. Start index. */
                start?: number;
                /** @description Defaults to 20. Valid values: 0 to 100. Number of match ids to return. */
                count?: number;
            };
            header?: never;
            path: {
                puuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "match-v5.getMatch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                matchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["match-v5.MatchDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "match-v5.getTimeline": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                matchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["match-v5.MatchTimelineDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "spectator-v4.getCurrentGameInfoBySummoner": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the summoner. */
                encryptedSummonerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["spectator-v4.CurrentGameInfo"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "spectator-v4.getFeaturedGames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["spectator-v4.FeaturedGames"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "summoner-v4.getByRSOPUUID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Summoner ID */
                rsoPUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["summoner-v4.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "summoner-v4.getByAccountId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                encryptedAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["summoner-v4.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "summoner-v4.getBySummonerName": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Summoner Name */
                summonerName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["summoner-v4.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "summoner-v4.getByPUUID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Summoner ID */
                encryptedPUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["summoner-v4.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "summoner-v4.getByAccessToken": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["summoner-v4.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "summoner-v4.getBySummonerId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Summoner ID */
                encryptedSummonerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["summoner-v4.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-league-v1.getChallengerLeague": {
        parameters: {
            query?: {
                /** @description Defaults to RANKED_TFT. */
                queue?: "RANKED_TFT" | "RANKED_TFT_DOUBLE_UP";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-league-v1.LeagueListDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-league-v1.getLeagueEntriesForSummoner": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                summonerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-league-v1.LeagueEntryDTO"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-league-v1.getLeagueEntries": {
        parameters: {
            query?: {
                /** @description Defaults to RANKED_TFT. */
                queue?: "RANKED_TFT" | "RANKED_TFT_DOUBLE_UP";
                /** @description Defaults to 1. Starts with page 1. */
                page?: number;
            };
            header?: never;
            path: {
                tier: "DIAMOND" | "EMERALD" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON";
                division: "I" | "II" | "III" | "IV";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-league-v1.LeagueEntryDTO"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-league-v1.getGrandmasterLeague": {
        parameters: {
            query?: {
                /** @description Defaults to RANKED_TFT. */
                queue?: "RANKED_TFT" | "RANKED_TFT_DOUBLE_UP";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-league-v1.LeagueListDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-league-v1.getLeagueById": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-league-v1.LeagueListDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-league-v1.getMasterLeague": {
        parameters: {
            query?: {
                /** @description Defaults to RANKED_TFT. */
                queue?: "RANKED_TFT" | "RANKED_TFT_DOUBLE_UP";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-league-v1.LeagueListDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-league-v1.getTopRatedLadder": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                queue: "RANKED_TFT_TURBO";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-league-v1.TopRatedLadderEntryDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-match-v1.getMatchIdsByPUUID": {
        parameters: {
            query?: {
                /** @description Defaults to 0. Start index. */
                start?: number;
                /** @description Epoch timestamp in seconds. */
                endTime?: number;
                /** @description Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any matches played before June 16th, 2021 won't be included in the results if the startTime filter is set. */
                startTime?: number;
                /** @description Defaults to 20. Number of match ids to return. */
                count?: number;
            };
            header?: never;
            path: {
                puuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-match-v1.getMatch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                matchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-match-v1.MatchDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-status-v1.getPlatformData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-status-v1.PlatformDataDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-summoner-v1.getByAccountId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                encryptedAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-summoner-v1.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-summoner-v1.getBySummonerName": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Summoner Name */
                summonerName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-summoner-v1.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-summoner-v1.getByPUUID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Summoner ID */
                encryptedPUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-summoner-v1.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-summoner-v1.getByAccessToken": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token. */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-summoner-v1.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tft-summoner-v1.getBySummonerId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Summoner ID */
                encryptedSummonerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tft-summoner-v1.SummonerDTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-stub-v5.createTournamentCode": {
        parameters: {
            query: {
                /** @description The number of codes to create (max 1000) */
                count?: number;
                /** @description The tournament ID */
                tournamentId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Metadata for the generated code */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tournament-stub-v5.TournamentCodeParametersV5"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-stub-v5.getTournamentCode": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tournament code string. */
                tournamentCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tournament-stub-v5.TournamentCodeV5DTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-stub-v5.getLobbyEventsByCode": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The short code to look up lobby events for */
                tournamentCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tournament-stub-v5.LobbyEventV5DTOWrapper"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-stub-v5.registerProviderData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The provider definition. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tournament-stub-v5.ProviderRegistrationParametersV5"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-stub-v5.registerTournament": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The tournament definition. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tournament-stub-v5.TournamentRegistrationParametersV5"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-v5.createTournamentCode": {
        parameters: {
            query: {
                /** @description The tournament ID */
                tournamentId: number;
                /** @description The number of codes to create (max 1000) */
                count?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Metadata for the generated code */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tournament-v5.TournamentCodeParametersV5"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-v5.getTournamentCode": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tournament code string. */
                tournamentCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tournament-v5.TournamentCodeV5DTO"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-v5.updateCode": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tournament code to update */
                tournamentCode: string;
            };
            cookie?: never;
        };
        /** @description The fields to update */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["tournament-v5.TournamentCodeUpdateParametersV5"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-v5.getGames": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tournamentCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tournament-v5.TournamentGamesV5"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-v5.getLobbyEventsByCode": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The short code to look up lobby events for */
                tournamentCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tournament-v5.LobbyEventV5DTOWrapper"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-v5.registerProviderData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The provider definition. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tournament-v5.ProviderRegistrationParametersV5"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "tournament-v5.registerTournament": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The tournament definition. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tournament-v5.TournamentRegistrationParametersV5"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "val-content-v1.getContent": {
        parameters: {
            query?: {
                locale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["val-content-v1.ContentDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "val-match-v1.getMatch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                matchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["val-match-v1.MatchDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "val-match-v1.getMatchlist": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                puuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["val-match-v1.MatchlistDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "val-match-v1.getRecent": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                queue: "competitive" | "unrated" | "spikerush" | "tournamentmode" | "deathmatch" | "onefa" | "ggteam" | "hurm";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["val-match-v1.RecentMatchesDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "val-ranked-v1.getLeaderboard": {
        parameters: {
            query?: {
                /** @description Defaults to 200. Valid values: 1 to 200. */
                size?: number;
                /** @description Defaults to 0. */
                startIndex?: number;
            };
            header?: never;
            path: {
                /** @description Act ids can be found using the val-content API. */
                actId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["val-ranked-v1.LeaderboardDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "val-status-v1.getPlatformData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["val-status-v1.PlatformDataDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Gateway timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
